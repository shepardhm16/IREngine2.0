<!--?xml version="1.0"?--><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
 <head>
  <meta name="author" content="Created with Hot Potatoes by Half-Baked Software, registered to Kathleen Bulger-Barnett.">
  <meta name="keywords" content="Hot Potatoes, Hot Potatoes, Half-Baked Software, Windows, University of Victoria"> 
  <link rel="schema.DC" href="http://purl.org/dc/elements/1.1/"> 
  <meta name="DC:Creator" content="UNREGISTERED"> 
  <meta name="DC:Title" content="Subjunctive 101:  General concept of the subjunctive"> 
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
  <title>
Subjunctive 101:  General concept of the subjunctive
</title> 
  <!-- Made with executable version 5.5 Release 0 Build 21 --> 
  <style type="text/css">

body{
	font-family: Geneva,Arial;
	background-color: #ffffff;
	color: #000000;
 
	padding-left: 5%;
	padding-right: 5%;
	font-size: small;
}

p{
	text-align: justify;
	margin: 0px;
	font-size: small;
}

table,tr,td,div,span{
	font-size: small;
}

div.Titles{
	padding-top: 10px;
	text-align: center;
	margin-bottom: 4px;
	color: #000033;
}

.ExerciseTitle{
	font-size: large;
	color: #000033;
}

.ExerciseSubtitle{
	color: #000033;

}

span.Instructions{

}

.QuestionText{

}

.AnswerText{

}

.QNum{
	font-weight: bold;
}

.FeedbackText{

}	

div.Feedback {
	background-color: #ffffff;
	left: 1px;
	top: 33%;
	z-index: 1;
	border-style: solid;
	border-width: 1px;
	padding: 5px;
	text-align: center;
	color: #000033;
	position: absolute;
	display: none;
	font-size: small;
}


div.LeftContainer{
	border-style: none;
	padding: 2px 0px 2px 0px;
	float: left;
	width: 49.8%;
	margin-bottom: 0px;
}

div.RightContainer{
	border-style: none;
	padding: 2px 0px 2px 0px;
	float: right;
	width: 49.8%;
	margin-bottom: 0px;
}

.ReadingText{

}


div.StdDiv{
	background-color: #bbbbee;
	text-align: center;
	color: #000000;
	padding: 1em;
	border-style: solid;
	border-width: 1px;
	border-color: #000000;
	margin: 1px 0px 0px 0px;
	font-size: small;
}


.FunctionButton {
	background-color: #bbbbee;
	color: #000000;
	text-align: center;
	border-style: solid;
	border-color: #bbbbee;
	border-width: 2px;
	padding: 3px 6px 3px 6px;
	cursor: pointer;
}

div.NavButtonBar{
	background-color: #000066;
	text-align: center;
	margin: 2px 0px 2px 0px;
	clear: both;
	font-size: small;
}

div.NavButtonBar button {
	border-style: solid;
	border-color: #000066;
	background-color: #000066;
	border-width: 2px;
	padding: 2px 2px 2px 2px;
	color: #ffffff;
	cursor: pointer;	
}

a{
	color: #0000ff;
}

a:visited{
	color: #0000cc;
}

a:hover{
	color: #0000ff;
}

</style> 
  <script type="text/javascript">

//<![CDATA[

<!--

// BrowserCheck Object


function BrowserCheck() {
	var b = navigator.appName;
	this.mac = (navigator.appVersion.indexOf('Mac') != -1);
	if (b=="Netscape") this.b = 'ns';
	else if (b=="Microsoft Internet Explorer") this.b = 'ie';
	else this.b = b;
	this.ns = (this.b == 'ns');
	this.ie = (this.b == 'ie');
	this.version = navigator.appVersion;
	if (this.b == 'ie'){
		var x = this.version.indexOf('MSIE ') + 5;
		var vnum = '';

		while ((this.version.charAt(x) > -1)&&(this.version.charAt(x) < 10)){
			vnum += this.version.charAt(x);
			x++;
		}
		this.v = parseInt(vnum);
	}
	else{
		this.v = parseInt(this.version);
	}
	if (this.ns&&(this.v == 5)){
		this.v = 6;
	}
	this.min = (this.v > 5);
}

is = new BrowserCheck();

if ((is.min == false)||(is.ie5mac)){
	alert('Your browser can\'t handle this page. You need NS6+ or IE6+ on Windows, or NS6+ on Mac.');
}

function PageDim(){
//Get the page width and height
	this.W = 600;
	this.H = 400;
	if (is.ns) this.W = window.innerWidth;
	if (is.ie) this.W = document.body.clientWidth;
	if (is.ns) this.H = window.innerHeight;
	if (is.ie) this.H = document.body.clientHeight;

}

var pg = null;

function SuppressBackspace(e){ 

	if (is.ns) {
		thisKey = e.keyCode;
	}
	else {
		thisKey = window.event.keyCode;
	}

	var Suppress = false;

	if (thisKey == 8) {
		Suppress = true;
	}

	if (Suppress == true){
		if (is.ie){
			window.event.returnValue = false;	
			window.event.cancelBubble = true;
		}
		else{
			e.preventDefault();
		}
	}
}

var NavLightColor = '#7f7fb2';
var NavShadeColor = '#000033';
var NavBarColor = '#000066';
var FuncLightColor = '#ddddf6';
var FuncShadeColor = '#5d5d77';
var ExBGColor = '#bbbbee';

function NavBtnOver(Btn){
	Btn.style.padding = '1px 3px 3px 1px';
	Btn.style.borderLeftColor = NavLightColor;
	Btn.style.borderTopColor = NavLightColor;
	Btn.style.borderRightColor = NavShadeColor;
	Btn.style.borderBottomColor = NavShadeColor;
}

function NavBtnOut(Btn){
	Btn.style.borderColor = NavBarColor;
	Btn.style.padding = '2px 2px 2px 2px';
}

function NavBtnDown(Btn){
	Btn.style.borderLeftColor = NavShadeColor;
	Btn.style.borderTopColor = NavShadeColor;
	Btn.style.borderRightColor = NavLightColor;
	Btn.style.borderBottomColor = NavLightColor;
	Btn.style.padding = '3px 1px 1px 3px';
}

function FuncBtnOver(Btn){
	Btn.style.padding = '2px 7px 4px 5px';
	Btn.style.borderLeftColor = FuncLightColor;
	Btn.style.borderTopColor = FuncLightColor;
	Btn.style.borderRightColor = FuncShadeColor;
	Btn.style.borderBottomColor = FuncShadeColor;
}

function FuncBtnOut(Btn){
	Btn.style.borderColor = '#bbbbee';
	Btn.style.padding = '3px 6px 3px 6px';
}

function FuncBtnDown(Btn){
	Btn.style.borderLeftColor = FuncShadeColor;
	Btn.style.borderTopColor = FuncShadeColor;
	Btn.style.borderRightColor = FuncLightColor;
	Btn.style.borderBottomColor = FuncLightColor;
	Btn.style.padding = '4px 5px 2px 7px';
}

var topZ = 100;

var CurrQNum = 0;
var ALetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
var CorrectIndicator = ':-)';
var IncorrectIndicator = 'X';
var YourScoreIs = 'Your score is ';
var Tries = 0;
var CorrectChoices = 0;
var ContinuousScoring = true;
var CorrectFirstTime = 'Questions answered correctly first time: ';
var ShuffleQs = true;
var ShuffleAs = false;
var DefaultRight = 'Correct!';
var DefaultWrong = 'Sorry! Try again.';
var QsToShow = 21;
var ReadingURL = '[ReadingURL]';
var Score = 0;
var TempReading = '';
var StartTime = (new Date()).toLocaleString();
var HPNStartTime = (new Date()).getTime();
var Finished = false;
var SubmissionTimeout = 30000;



var QButtonsOpener = '<button class="FunctionButton" onfocus="FuncBtnOver(this)" onblur="FuncBtnOut(this)" onmouseover="FuncBtnOver(this)" onmouseout="FuncBtnOut(this)" onmousedown="FuncBtnDown(this)" onmouseup="FuncBtnOver(this)" onclick="ChangeQ(-1); return false;">&nbsp;&lt;=&nbsp;</button><span class="QNum">';
var QButtonsCloser = '</span><button id="NextQButton" class="FunctionButton" onfocus="FuncBtnOver(this)" onblur="FuncBtnOut(this)" onmouseover="FuncBtnOver(this)" onmouseout="FuncBtnOut(this)" onmousedown="FuncBtnDown(this)" onmouseup="FuncBtnOver(this)" onclick="ChangeQ(1); return false;">&nbsp;=&gt;&nbsp;</button>';


var TableOpener = '<form name="QForm">';
TableOpener += '<table border="0" style="margin-left: auto; margin-right: auto; margin-top: 10px;">';
var QRow = '<tr><td valign="top" align="right"><span class="QNum">[QNumber].&nbsp;&nbsp;</span></td>';
QRow += '<td valign="top" align="left"> <p><span class="QuestionText">[Question]</span><br />&nbsp;</p>';
QRow += '</td></tr>';

var ARow = '<tr><td>&nbsp;</td><td><table border="0" cellpadding="0" cellspacing="2">';
ARow += '<tr><td></td><td valign="middle" align="left"><span id="FB_[QNum]_[ANum]">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></td>';
ARow += '<td valign="middle" align="left"><button class="FunctionButton" onfocus="FuncBtnOver(this)" onmouseover="FuncBtnOver(this)" onblur="FuncBtnOut(this)" onmouseout="FuncBtnOut(this)" onmousedown="FuncBtnDown(this)" onmouseup="FuncBtnOver(this)" onclick="CheckAnswer([QNum],[ANum]); return false;">&nbsp;[ALetter]&nbsp;</button></td>';

ARow += '<td><span class="AnswerText">[Ans]</span></td></tr>';
ARow += '</table></td></tr>';

var MARow = '<tr><td></td><td valign="top" align="left"><input type="checkbox" name="A_[QNum]_[ANum]" value="[Correct]"></input>';
MARow += '<span class="AnswerText">[Ans]</span></td></tr>';


var CheckButton = '<tr><td align="center" colspan="2"><table border="0"><tr><td>';
CheckButton += '<button class="FunctionButton" onmouseover="FuncBtnOver(this)" onfocus="FuncBtnOver(this)" onmouseout="FuncBtnOut(this)" onblur="FuncBtnOut(this)" onmousedown="FuncBtnDown(this)" onmouseup="FuncBtnOver(this)" onclick="CheckMulti([QNum]); return false;">&nbsp;Check&nbsp;</button>';
CheckButton += '</td></tr></table></td></tr>';

TableCloser = '</table></form>';

function ReduceItems(){
	var ItemToDump=0;
	var j=0;
	while (I.length > QsToShow){
		ItemToDump = Math.floor(I.length*Math.random());
		for (j=ItemToDump; j<(I.length-1); j++){
			I[j] = I[j+1];
		}
		I.length = I.length-1;
	}
}

function Shuffle(InArray){
	Temp = new Array();
	var Len = InArray.length;

	var j = Len;

	for (var i=0; i<Len; i++){
		Temp[i] = InArray[i];
	}

	for (i=0; i<Len; i++){
		Num = Math.floor(j  *  Math.random());
		InArray[i] = Temp[Num];

		for (var k=Num; k < j; k++) {
			Temp[k] = Temp[k+1];
		}
		j--;
	}
	return InArray;
}

function WriteFeedback(Feedback){
	var Output = Feedback + '<br /><br />';
	document.getElementById('FeedbackContent').innerHTML = Output;
	var FDiv = document.getElementById('FeedbackDiv');
//Calculate and set its left setting
	topZ++;
	FDiv.style.zIndex = topZ;

//Position the feedback div
	pg = new PageDim();
	FDiv.style.left = Math.floor(pg.W/3) + 'px';
	FDiv.style.width = Math.floor(pg.W/3) + 'px';
//Set the top again in case the window has been resized
	if (is.ns){
		FDiv.style.top = Math.floor(pg.H/3) + window.pageYOffset + 'px';
	}
	else{
		FDiv.style.top = Math.floor(pg.H/3) + document.body.scrollTop + 'px';
	}
	FDiv.style.display = 'block';
	document.getElementById('FeedbackOKButton').focus();


}

function HideFeedback(){
	document.getElementById('FeedbackOKButton').blur();
	document.getElementById('FeedbackContent').innerHTML = '';
	document.getElementById('FeedbackDiv').style.display='none';
	document.getElementById('NextQButton').focus();
	if (Finished == true){
		Finish();
	}
}

function WriteToInstructions(Feedback) {
	Feedback = '<span class="FeedbackText">' + Feedback + '</span>';
	document.getElementById('InstructionsDiv').innerHTML = Feedback;

}

function WriteScore(Feedback) {
	Feedback = '<span class="FeedbackText">' + Feedback + '</span>';
	document.getElementById('ScoreDiv').innerHTML = Feedback;

}




function StartUp(){

//IE bug avoidance -- remove bottom navbar
	if (is.ie){
		if (document.getElementById('BottomNavBar') != null){
			document.getElementById('TheBody').removeChild(document.getElementById('BottomNavBar'));
		}
	}

	if (is.ie){
		document.attachEvent('onkeydown',SuppressBackspace);
		window.attachEvent('onkeydown',SuppressBackspace);
	}
	else if (is.ns){
		window.addEventListener('keypress',SuppressBackspace,false);
	}





//Reduce array if required
	if (QsToShow < I.length){
		ReduceItems();
	}

//Shuffle stuff if required

	if (ShuffleQs == true){
		I = Shuffle(I);
	}

	if (ShuffleAs == true){
		for (var i=0; i<I.length; i++){
			I[i][1] = Shuffle(I[i][1]);
		}
	}

//Create arrays
	CreateStatusArrays();


//Show the first question
	ShowQuestion(CurrQNum);





}


I = new Array();

I[0] = new Array();
I[0][0]='Enojarse ';
I[0][1] = new Array();
I[0][1][0] = new Array();
I[0][1][0][0]='Wishing';
I[0][1][0][1]='No.';
I[0][1][0][2] = 0;
I[0][1][1] = new Array();
I[0][1][1][0]='Doubt';
I[0][1][1][1]='No.';
I[0][1][1][2] = 0;
I[0][1][2] = new Array();
I[0][1][2][0]='Emotion';
I[0][1][2][1]='Correct! Anger is an emotion';
I[0][1][2][2] = 1;
I[0][2] = 0;

I[1] = new Array();
I[1][0]='Querer';
I[1][1] = new Array();
I[1][1][0] = new Array();
I[1][1][0][0]='Wishing';
I[1][1][0][1]='Muy bien!';
I[1][1][0][2] = 1;
I[1][1][1] = new Array();
I[1][1][1][0]='Doubt';
I[1][1][1][1]='No. Querer means "to want" so it is a "wishing" verb.';
I[1][1][1][2] = 0;
I[1][1][2] = new Array();
I[1][1][2][0]='Emotion';
I[1][1][2][1]='No. You are not using your dictionary.';
I[1][1][2][2] = 0;
I[1][2] = 0;

I[2] = new Array();
I[2][0]='Es terrible';
I[2][1] = new Array();
I[2][1][0] = new Array();
I[2][1][0][0]='Wishing';
I[2][1][0][1]='Incorrect!';
I[2][1][0][2] = 0;
I[2][1][1] = new Array();
I[2][1][1][0]='Doubt';
I[2][1][1][1]='Incorrect!';
I[2][1][1][2] = 0;
I[2][1][2] = new Array();
I[2][1][2][0]='Emotion';
I[2][1][2][1]='Correct!';
I[2][1][2][2] = 1;
I[2][2] = 0;

I[3] = new Array();
I[3][0]='Es ridiculo';
I[3][1] = new Array();
I[3][1][0] = new Array();
I[3][1][0][0]='Wishing';
I[3][1][0][1]='Incorrect.';
I[3][1][0][2] = 0;
I[3][1][1] = new Array();
I[3][1][1][0]='Doubt';
I[3][1][1][1]='Incorrect.';
I[3][1][1][2] = 0;
I[3][1][2] = new Array();
I[3][1][2][0]='Emotion';
I[3][1][2][1]='Correct! You are expressing how you feel.';
I[3][1][2][2] = 1;
I[3][2] = 0;

I[4] = new Array();
I[4][0]='No es verdad';
I[4][1] = new Array();
I[4][1][0] = new Array();
I[4][1][0][0]='Wishing';
I[4][1][0][1]='Incorrect';
I[4][1][0][2] = 0;
I[4][1][1] = new Array();
I[4][1][1][0]='Doubt';
I[4][1][1][1]='Correct! If it is not true, it is doubt.';
I[4][1][1][2] = 1;
I[4][1][2] = new Array();
I[4][1][2][0]='Emotion';
I[4][1][2][1]='Incorrect';
I[4][1][2][2] = 0;
I[4][2] = 0;

I[5] = new Array();
I[5][0]='Demandar ';
I[5][1] = new Array();
I[5][1][0] = new Array();
I[5][1][0][0]='Wishing';
I[5][1][0][1]='Muy bien!';
I[5][1][0][2] = 1;
I[5][1][1] = new Array();
I[5][1][1][0]='Doubt';
I[5][1][1][1]='Incorrect';
I[5][1][1][2] = 0;
I[5][1][2] = new Array();
I[5][1][2][0]='Emotion';
I[5][1][2][1]='Incorrect. Demanding is a form of wishing.';
I[5][1][2][2] = 0;
I[5][2] = 0;

I[6] = new Array();
I[6][0]='Desear';
I[6][1] = new Array();
I[6][1][0] = new Array();
I[6][1][0][0]='Wishing';
I[6][1][0][1]='Correct!';
I[6][1][0][2] = 1;
I[6][1][1] = new Array();
I[6][1][1][0]='Doubt';
I[6][1][1][1]='No. Desear means "to wish"';
I[6][1][1][2] = 0;
I[6][1][2] = new Array();
I[6][1][2][0]='Emotion';
I[6][1][2][1]='Incorrect';
I[6][1][2][2] = 0;
I[6][2] = 0;

I[7] = new Array();
I[7][0]='Es posible ';
I[7][1] = new Array();
I[7][1][0] = new Array();
I[7][1][0][0]='Wishing';
I[7][1][0][1]='No.';
I[7][1][0][2] = 0;
I[7][1][1] = new Array();
I[7][1][1][0]='Doubt';
I[7][1][1][1]='Correct! In Spanish is something is "only possible", it is not strong enough to be considered certain. Therefore, it falls under doubt.';
I[7][1][1][2] = 1;
I[7][1][2] = new Array();
I[7][1][2][0]='Emotion';
I[7][1][2][1]='No.';
I[7][1][2][2] = 0;
I[7][2] = 0;

I[8] = new Array();
I[8][0]='Esperar ';
I[8][1] = new Array();
I[8][1][0] = new Array();
I[8][1][0][0]='Wishing';
I[8][1][0][1]='Correct. Hoping is a form of wishing';
I[8][1][0][2] = 1;
I[8][1][1] = new Array();
I[8][1][1][0]='Doubt';
I[8][1][1][1]='No. ';
I[8][1][1][2] = 0;
I[8][1][2] = new Array();
I[8][1][2][0]='Emotion';
I[8][1][2][1]='Also correct. ';
I[8][1][2][2] = 1;
I[8][2] = 0;

I[9] = new Array();
I[9][0]='Es dudoso';
I[9][1] = new Array();
I[9][1][0] = new Array();
I[9][1][0][0]='Wishing';
I[9][1][0][1]='No. Use your dictionary!';
I[9][1][0][2] = 0;
I[9][1][1] = new Array();
I[9][1][1][0]='Doubt';
I[9][1][1][1]='Correct. It is doubtful, so it falls under doubt.';
I[9][1][1][2] = 1;
I[9][1][2] = new Array();
I[9][1][2][0]='Emotion';
I[9][1][2][1]='No. Use your dictionary!';
I[9][1][2][2] = 0;
I[9][2] = 0;

I[10] = new Array();
I[10][0]='Dudar';
I[10][1] = new Array();
I[10][1][0] = new Array();
I[10][1][0][0]='Wishing';
I[10][1][0][1]='No.';
I[10][1][0][2] = 0;
I[10][1][1] = new Array();
I[10][1][1][0]='Doubt';
I[10][1][1][1]='Coorect! Dudar means "to doubt".';
I[10][1][1][2] = 1;
I[10][1][2] = new Array();
I[10][1][2][0]='Emotion';
I[10][1][2][1]='No.';
I[10][1][2][2] = 0;
I[10][2] = 0;

I[11] = new Array();
I[11][0]='NO creer';
I[11][1] = new Array();
I[11][1][0] = new Array();
I[11][1][0][0]='Wishing';
I[11][1][0][1]='no';
I[11][1][0][2] = 0;
I[11][1][1] = new Array();
I[11][1][1][0]='Doubt';
I[11][1][1][1]='Correct! To not believe is to doubt.';
I[11][1][1][2] = 1;
I[11][1][2] = new Array();
I[11][1][2][0]='Emotion';
I[11][1][2][1]='no. To not believe is to doubt.';
I[11][1][2][2] = 0;
I[11][2] = 0;

I[12] = new Array();
I[12][0]='Preferir';
I[12][1] = new Array();
I[12][1][0] = new Array();
I[12][1][0][0]='Wishing';
I[12][1][0][1]='Correct!';
I[12][1][0][2] = 1;
I[12][1][1] = new Array();
I[12][1][1][0]='Doubt';
I[12][1][1][1]='Incorrect. A preferece is a wish.';
I[12][1][1][2] = 0;
I[12][1][2] = new Array();
I[12][1][2][0]='Emotion';
I[12][1][2][1]='Incorrect. A preferece is a wish.';
I[12][1][2][2] = 0;
I[12][2] = 0;

I[13] = new Array();
I[13][0]='No es posible';
I[13][1] = new Array();
I[13][1][0] = new Array();
I[13][1][0][0]='Wishing';
I[13][1][0][1]='Incorrect.';
I[13][1][0][2] = 0;
I[13][1][1] = new Array();
I[13][1][1][0]='Doubt';
I[13][1][1][1]='Correct! If something in Spanish is not possible, it falls under doubt.';
I[13][1][1][2] = 1;
I[13][1][2] = new Array();
I[13][1][2][0]='Emotion';
I[13][1][2][1]='Incorrect.';
I[13][1][2][2] = 0;
I[13][2] = 0;

I[14] = new Array();
I[14][0]='Es probable';
I[14][1] = new Array();
I[14][1][0] = new Array();
I[14][1][0][0]='Wishing';
I[14][1][0][1]='';
I[14][1][0][2] = 0;
I[14][1][1] = new Array();
I[14][1][1][0]='Doubt';
I[14][1][1][1]='Correct! If something is only probable or likely, it is not strong enough to be considered certain. Therefore, it falls into doubt.';
I[14][1][1][2] = 1;
I[14][1][2] = new Array();
I[14][1][2][0]='Emotion';
I[14][1][2][1]='';
I[14][1][2][2] = 0;
I[14][2] = 0;

I[15] = new Array();
I[15][0]='Sugerir';
I[15][1] = new Array();
I[15][1][0] = new Array();
I[15][1][0][0]='Wishing';
I[15][1][0][1]='Correct! When you suggest something, you are trying to tell someone what you want.';
I[15][1][0][2] = 1;
I[15][1][1] = new Array();
I[15][1][1][0]='Doubt';
I[15][1][1][1]='Incorrect.When you suggest something, you are trying to tell someone what you want.';
I[15][1][1][2] = 0;
I[15][1][2] = new Array();
I[15][1][2][0]='Emotion';
I[15][1][2][1]='Incorrect. When you suggest something, you are trying to tell someone what you want.';
I[15][1][2][2] = 0;
I[15][2] = 0;

I[16] = new Array();
I[16][0]='Sentir';
I[16][1] = new Array();
I[16][1][0] = new Array();
I[16][1][0][0]='Wishing';
I[16][1][0][1]='Incorrect! Regret is an emotion.';
I[16][1][0][2] = 0;
I[16][1][1] = new Array();
I[16][1][1][0]='Doubt';
I[16][1][1][1]='Incorrect! Regret is an emotion.';
I[16][1][1][2] = 0;
I[16][1][2] = new Array();
I[16][1][2][0]='Emotion';
I[16][1][2][1]='Correct! Regret is an emotion.';
I[16][1][2][2] = 1;
I[16][2] = 0;

I[17] = new Array();
I[17][0]='Alegrarse';
I[17][1] = new Array();
I[17][1][0] = new Array();
I[17][1][0][0]='Wishing';
I[17][1][0][1]='Incorrect';
I[17][1][0][2] = 0;
I[17][1][1] = new Array();
I[17][1][1][0]='Doubt';
I[17][1][1][1]='Incorrect. Alegrarse means "to be happy". It is an emotion';
I[17][1][1][2] = 0;
I[17][1][2] = new Array();
I[17][1][2][0]='Emotion';
I[17][1][2][1]='Correcto!';
I[17][1][2][2] = 1;
I[17][2] = 0;

I[18] = new Array();
I[18][0]='Es importante';
I[18][1] = new Array();
I[18][1][0] = new Array();
I[18][1][0][0]='Wishing';
I[18][1][0][1]='Correct! You are strongly expresing something that you want.';
I[18][1][0][2] = 1;
I[18][1][1] = new Array();
I[18][1][1][0]='Doubt';
I[18][1][1][1]='No.';
I[18][1][1][2] = 0;
I[18][1][2] = new Array();
I[18][1][2][0]='Emotion';
I[18][1][2][1]='No.';
I[18][1][2][2] = 0;
I[18][2] = 0;

I[19] = new Array();
I[19][0]='No es cierto';
I[19][1] = new Array();
I[19][1][0] = new Array();
I[19][1][0][0]='Wishing';
I[19][1][0][1]='No.';
I[19][1][0][2] = 0;
I[19][1][1] = new Array();
I[19][1][1][0]='Doubt';
I[19][1][1][1]='Correct!';
I[19][1][1][2] = 1;
I[19][1][2] = new Array();
I[19][1][2][0]='Emotion';
I[19][1][2][1]='No.';
I[19][1][2][2] = 0;
I[19][2] = 0;

I[20] = new Array();
I[20][0]='Preocuparse';
I[20][1] = new Array();
I[20][1][0] = new Array();
I[20][1][0][0]='Wishing';
I[20][1][0][1]='Incorrect. Worrying is an emotion.';
I[20][1][0][2] = 0;
I[20][1][1] = new Array();
I[20][1][1][0]='Doubt';
I[20][1][1][1]='Incorrect. Worrying is an emotion.';
I[20][1][1][2] = 0;
I[20][1][2] = new Array();
I[20][1][2][0]='Emotion';
I[20][1][2][1]='Correct! Worrying is an emotion.';
I[20][1][2][2] = 1;
I[20][2] = 0;


Status = new Array();


function CreateStatusArrays(){
	for (var x=0; x<I.length; x++){
		Status[x] = new Array();
		Status[x][0] = 0; // Question not done yet
		Status[x][1] = new Array(); //for tracking whether answers chosen
		for (var y=0; y<I[x][1].length; y++){
			Status[x][1][y] = '0'; //Answers not chosen yet
		}
		Status[x][2] = 0; //Wrong tries at this question so far
		Status[x][3] = 0; //Score for this question, out of one
	}
}

function UpdateQuestionStatus(QNum){
	if (Status[QNum][2] >= Status[QNum][1].length-1){
		Status[QNum][0] = 1;
		for (var i=0; i<Status[QNum][1].length; i++){
			if (Status[QNum][1][i] == '0'){
				Status[QNum][1][i] = 'R';
			}
		}
	}
}

function ReplaceStuff(Token, Replacement, InString){
	var i = InString.indexOf(Token);
	var FirstBit = '';
	var LastBit = '';
	while (i>-1){
		FirstBit = InString.substring(0, i);
		LastBit = InString.substring(i + Token.length, InString.length);	
		InString = FirstBit + Replacement + LastBit;
		i = InString.indexOf(Token);
	}
	return InString;
}

function ChangeQ(ChangeBy){
	var NewNum = CurrQNum + ChangeBy;
	if ((NewNum >= 0)&&(NewNum<I.length)){
		CurrQNum = NewNum;
		ShowQuestion(CurrQNum);
		CalculateScore();
		if (ContinuousScoring == true){
			var CurrScore = YourScoreIs + ' ' + Score + '%.';
			WriteScore(CurrScore);
		}
	}
}

function BuildQuestion(QNum){
	if (I[QNum][2] == 0){
		var Temp = ReplaceStuff('[Question]', I[QNum][0], QRow);

		var AnsRows = '';
		for (var i=0; i<I[QNum][1].length; i++){
			TempAns = ARow;
			TempAns = ReplaceStuff('[ANum]', i, TempAns);
			TempAns = ReplaceStuff('[ALetter]', ' ' + ALetters.charAt(i) + ' ', TempAns);
			TempAns = ReplaceStuff('[Ans]', I[QNum][1][i][0], TempAns);
			TempAns = ReplaceStuff('[Feedback]', I[QNum][1][i][1], TempAns);
			AnsRows += TempAns;
		}
		Temp += AnsRows;
		Temp = ReplaceStuff('[QNumber]', QNum+1, Temp);
		Temp = ReplaceStuff('[QNum]', QNum, Temp);
	}
	else{
		var Temp = ReplaceStuff('[Question]', I[QNum][0], QRow);
		var AnsRows = '';
		for (var i=0; i<I[QNum][1].length; i++){
			TempAns = MARow;
			TempAns = ReplaceStuff('[ANum]', i, TempAns);
			TempAns = ReplaceStuff('[Correct]', I[QNum][1][i][2], TempAns);
			TempAns = ReplaceStuff('[Ans]', I[QNum][1][i][0], TempAns);
			AnsRows += TempAns;
		}
		Temp += AnsRows;
		Temp += CheckButton;
		Temp = ReplaceStuff('[QNumber]', QNum+1, Temp);
		Temp = ReplaceStuff('[QNum]', QNum, Temp);
	}
	return Temp;
}

function DisplayExercise(StuffToDisplay){
	document.getElementById('MainDiv').innerHTML = StuffToDisplay;

}

function ShowQuestion(QNum){
//First, create the Q number readout at the top
	var Readout = (QNum+1) + '/' + I.length;
	while (Readout.length < 7){
		Readout = ' ' + Readout + ' ';
	}
	Readout = QButtonsOpener + Readout + QButtonsCloser;

	var Output = BuildQuestion(QNum);

	Output = TableOpener + Output + TableCloser;

	DisplayExercise(Readout + Output);

//Mark the answers already done
	for (i=0; i<Status[QNum][1].length; i++){
		if (Status[QNum][1][i] == 'R'){

			MarkAnswer(QNum,i,true,false)
		}
		if (Status[QNum][1][i] == 'W'){
			MarkAnswer(QNum,i,false,false)
		}
		if (Status[QNum][1][i] == 'C'){
			CheckCheckbox(QNum,i);
		}
	}

//Set the focus
	document.getElementById('NextQButton').focus();
}

function CheckMulti(QNum){
	var TotWrong = 0;
	var Output = '';
	var TotAns = I[QNum][1].length;
	for (var i=TotAns-1; i>=0; i--){
//Find any incorrect choices

		var b = eval('document.QForm.A_' + QNum + '_' + i);

		if (b != null){
//if it's wrong, count it
			if (b.checked == true){
				Status[QNum][1][i] = 'C';
			}
			else{
				Status[QNum][1][i] = 'U';
			}
			if (((b.checked == true) && (b.value == "0"))||((b.checked == false)&&(b.value == "1"))){
				TotWrong++;
			}
		}				
	}

	if (TotWrong == 0){
		Output = DefaultRight;
	}
	else{
		Output = DefaultWrong + '<br />' + (TotAns-TotWrong) + '/' + TotAns;
	}

//If you haven't tried the question before
	if (Status[QNum][0] == 0){
		if (TotWrong > 0){
			Status[QNum][2]++;
		}
		if (TotWrong == 0){
			Status[QNum][0] = 1;
//Calculate the score for this question as a floating-point fraction of 1
			Status[QNum][3] =  ((Status[QNum][1].length - Status[QNum][2]) - 1) / (Status[QNum][1].length - 1);
//If less than zero, set to zero
			if (Status[QNum][3] < 0){Status[QNum][3] = 0;}
		}
	}

//Check whether the quiz is finished
	Finished = true;
	for (var i=0; i<Status.length; i++){
		if (Status[i][0] == 0){Finished = false;}
	}

//Calculate the score if needed
		
		
	if (Status[QNum][0] == 1){
		if ((Finished==true)||(ContinuousScoring==true)){
			CalculateScore();
			var CurrScore = YourScoreIs + ' ' + Score + '%.';
			Output = Output + '<br />' + CurrScore;
			WriteScore(CurrScore);
		}

		if (Finished == true){
			var CFT = 0;
			for (i=0; i<I.length; i++){
				if (Status[i][2] == 0){
					CFT++;
				}


			}
			Output += '<br />' + CorrectFirstTime + CFT + '/' + I.length;
			WriteToInstructions(Output);


			setTimeout('Finish()', SubmissionTimeout);
		}
	}

//Show the feedback
	if (Output.length > 0){
		WriteFeedback(Output);
	}
}

function CheckAnswer(QNum, ANum){
	var Output = I[QNum][1][ANum][1];

	if (Output==''){
		if (I[QNum][1][ANum][2] == 1){
			Output = DefaultRight;
		}
		else{
			Output = DefaultWrong;
		}
	}

//If it's not been previously answered correctly
	if (Status[QNum][0] == 0){
//If it's a correct answer
		if (I[QNum][1][ANum][2] == 1){
			Status[QNum][0] = 1;//Mark the Q as done
			Status[QNum][1][ANum] = 'R';
			MarkAnswer(QNum, ANum, true);
//Calculate the score for this question as a floating-point fraction of 1
			var PossibleWrongs = 0;
			for (var i=0; i<I[QNum][1].length; i++){
				if (I[QNum][1][i][2] == 0){
					PossibleWrongs++;
				}
			}

			if (PossibleWrongs == 0){PossibleWrongs = 1;}

			Status[QNum][3] = 1 - (Status[QNum][2]/PossibleWrongs);

//If less than zero, set to zero
			if (Status[QNum][3] < 0){Status[QNum][3] = 0;}
		}
		else{
			if (Status[QNum][1][ANum] != 'W'){
				Status[QNum][1][ANum] = 'W';
				MarkAnswer(QNum, ANum, false);
				Status[QNum][2]++; //increment wrong tries for this Q
			}
		}
	}

	UpdateQuestionStatus(QNum);

//Check whether the quiz is finished
	Finished = true;
	for (var i=0; i<Status.length; i++){
		if (Status[i][0] == 0){Finished = false;}
	}

//Calculate the score if needed
		
	if (Status[QNum][0] == 1){
		if ((Finished==true)||(ContinuousScoring==true)){
			CalculateScore();
			var CurrScore = YourScoreIs + ' ' + Score + '%.';
			Output = Output + '<br />' + CurrScore;
			WriteScore(CurrScore);
		}

		if (Finished == true){
			var CFT = 0;
			for (i=0; i<I.length; i++){
				if (Status[i][2] == 0){
					CFT++;
				}
			}
			Output += '<br />' + CorrectFirstTime + CFT + '/' + I.length;
			WriteToInstructions(Output);
			CurrScore = YourScoreIs + ' ' + Score + '%.';
			WriteScore(CurrScore);


			setTimeout('Finish()', SubmissionTimeout);
		}
	}

//Show the feedback
	if (Output.length > 0){
		WriteFeedback(Output);
	}
}

function CalculateScore(){
	var TriedQs = 0;
	var TotalScore = 0;
	for (var i=0; i<Status.length; i++){
		if ((Status[i][2] > 0)||(Status[i][3] == 1)){
			TriedQs++;
			TotalScore += Status[i][3];
		}
	}
	if (TriedQs == 0){
		Score = 0;
	}
	else{
		Score = (Math.floor(100 * (TotalScore/TriedQs)));
	}
}

function MarkAnswer(QNum, ANum, Right, Done){
	if (Done == false){
		var Mark = CorrectIndicator;
		if (Right == false){Mark = IncorrectIndicator;}
		document.getElementById('FB_' + QNum + '_' + ANum).innerHTML = Mark;
	}
	else{
		if (Right == false){
			document.getElementById('FB_' + QNum + '_' + ANum).innerHTML = IncorrectIndicator;
		}
		else{
			document.getElementById('FB_' + QNum + '_' + ANum).innerHTML = CorrectIndicator;
		}
	}
}

function CheckCheckbox(QNum, ANum){
	if (eval('document.QForm.A_' + QNum + '_' + ANum) != null){
		eval('document.QForm.A_' + QNum + '_' + ANum).checked = true;

	}
}


function ShowReading(){
	document.getElementById('ReadingDiv').innerHTML = TempReading;
	document.getElementById('NextQButton').focus();

//	if (is.ns){window.resizeBy(1,0);window.resizeBy(-1,0);;}

}






function Finish(){
//If there's a form, fill it out and submit it
	if (document.store != null){
		Frm = document.store;
		Frm.starttime.value = HPNStartTime;
		Frm.endtime.value = (new Date()).getTime();
		Frm.mark.value = Score;
		Frm.submit();
	}
}

//-->

//]]>

</script> 
 </head> 
 <!-- <body>Fool those dumb ad-inserting ISPs</body> --> 
 <body onload="StartUp()" id="TheBody"> 
  <!-- BeginTopNavButtons --> 
  <div class="NavButtonBar"> 
   <button onfocus="NavBtnOver(this)" onblur="NavBtnOut(this)" onmouseover="NavBtnOver(this)" onmouseout="NavBtnOut(this)" onmousedown="NavBtnDown(this)" onmouseup="NavBtnOver(this)" onclick="history.back(); return false;">&lt;=</button> 
   <button onfocus="NavBtnOver(this)" onblur="NavBtnOut(this)" onmouseover="NavBtnOver(this)" onmouseout="NavBtnOut(this)" onmousedown="NavBtnDown(this)" onmouseup="NavBtnOver(this)" onclick="location='index.htm'; return false;"> Index </button> 
   <button onfocus="NavBtnOver(this)" onblur="NavBtnOut(this)" onmouseover="NavBtnOver(this)" onmouseout="NavBtnOut(this)" onmousedown="NavBtnDown(this)" onmouseup="NavBtnOver(this)" onclick="location='nextpage.htm'; return false;">=&gt;</button> 
  </div> 
  <!-- EndTopNavButtons --> 
  <div class="Titles"> 
   <span class="ExerciseTitle">Subjunctive 101: General concept of the subjunctive</span>
   <br> 
   <span class="ExerciseSubtitle">Multiple-choice exercise</span>
   <br> 
  </div> 
  <div id="InstructionsDiv" class="StdDiv"> 
   <p id="Instructions">Choose the correct answer for each question.</p> 
  </div> 
  <div class="LeftContainer"> 
   <div id="Reading" class="StdDiv"> 
    <div id="ReadingDiv"> 
     <span class="ExerciseTitle">Subjunctive 101 General concept of the subjunctive</span>
     <br>
     <br>
     <p>Spanish has two "moods". One is the indicative and the other is the subjunctive. The INDICATIVE mood INDICATES FACTS (My name is Miguel; It is sunny today; Last night I played soccer). The SUBJUNCTIVE reflects SUBJECTIVE PERCEPTIONS and UNTANGIBLES.<br><br>Specifically, the subjunctive mood is used for three traditional reasons:<br>Wishing <br>Doubt<br>Emotions<br><br>Since these three traditional causes comprise a fair number of subjunctive triggers, it is very important for students to be familiar with the vocabulary associated with these concepts, so have your dictionary handy. Remember that the subjunctive is not real. Rather, it only reflects what the subject is wishing, doubting, or feeling (p.s. that's why we call it subjective).<br><br>More subjunctive quick facts: The "trigger" (wishing, doubt, emotion) is in the indicative and the subjunctive traditionally falls in the latter part of the sentence. Furthermore, there tends to be two subjects, for example, WE hope that HE is well; They are glad that WE are here; The TEACHER hopes that the STUDENTS understand. The indicative part is real. Since the listener never knows the outcome of the subjunctive part, it is immeasurable. In the example "I doubt that it will rain" the "real part (my doubt) is in the indicative. Since we do not know the outcome of whether or not it will rain, that part is in the subjunctive.<br><br>In this exercise, identify the nature of the subjunctive trigger word. The three traditional uses of the subjunctive are verbs of WISHING, DOUBT, and EMOTION.<br></p> 
    </div> 
   </div> 
  </div> 
  <div class="RightContainer"> 
   <div id="ScoreDiv" class="StdDiv">
     &nbsp; 
   </div> 
   <div id="MainDiv" class="StdDiv">
     &nbsp; 
   </div> 
  </div> 
  <div class="Feedback" id="FeedbackDiv"> 
   <div class="FeedbackText" id="FeedbackContent"></div> 
   <button id="FeedbackOKButton" class="FunctionButton" onfocus="FuncBtnOver(this)" onblur="FuncBtnOut(this)" onmouseover="FuncBtnOver(this)" onmouseout="FuncBtnOut(this)" onmousedown="FuncBtnDown(this)" onmouseup="FuncBtnOver(this)" onclick="HideFeedback(); return false;">&nbsp;OK&nbsp;</button> 
  </div> 
  <!-- BeginBottomNavButtons --> 
  <div class="NavButtonBar" id="BottomNavBar"> 
   <button onfocus="NavBtnOver(this)" onblur="NavBtnOut(this)" onmouseover="NavBtnOver(this)" onmouseout="NavBtnOut(this)" onmousedown="NavBtnDown(this)" onmouseup="NavBtnOver(this)" onclick="history.back(); return false;">&lt;=</button> 
   <button onfocus="NavBtnOver(this)" onblur="NavBtnOut(this)" onmouseover="NavBtnOver(this)" onmouseout="NavBtnOut(this)" onmousedown="NavBtnDown(this)" onmouseup="NavBtnOver(this)" onclick="location='index.htm'; return false;"> Index </button> 
   <button onfocus="NavBtnOver(this)" onblur="NavBtnOut(this)" onmouseover="NavBtnOver(this)" onmouseout="NavBtnOut(this)" onmousedown="NavBtnDown(this)" onmouseup="NavBtnOver(this)" onclick="location='nextpage.htm'; return false;">=&gt;</button> 
  </div> 
  <!-- EndBottomNavButtons --> 
  <!-- BeginSubmissionForm --> 
  <!-- EndSubmissionForm -->   
 </body>
</html>