<html>
 <head>
  <meta name="author" content="Created with Hot Potatoes by Half-Baked Software, registered to Kathleen Bulger-Barnett.">
  <meta name="keywords" content="Hot Potatoes, Hot Potatoes, Half-Baked Software, Windows, University of Victoria"> 
  <title>
Subjunctive 101: The fourth use
</title> 
  <script language="javascript" type="text/javascript">

//<![CDATA[

<!--

// BrowserCheck Object

function BrowserCheck() {
	var b = navigator.appName
//HBS extension
	this.mac = (navigator.appVersion.indexOf('Mac') != -1)
	if (b=="Netscape") this.b = "ns"
	else if (b=="Microsoft Internet Explorer") this.b = "ie"
	else this.b = b
	this.version = navigator.appVersion
	this.v = parseInt(this.version)
	this.ns = (this.b=="ns" && this.v>=4)
	this.ns4 = (this.b=="ns" && this.v==4)
	this.ns5 = (this.b=="ns" && this.v==5)
	this.ie = (this.b=="ie" && this.v>=4)
	this.ie4 = (this.version.indexOf('MSIE 4')>0)
	this.ie5 = (this.version.indexOf('MSIE 5')>0)
	this.min = (this.ns||this.ie)
	this.CRAPBrowser = (this.ie4 && this.mac); //Cannot Resolve Addresses Properly
}

is = new BrowserCheck();

var LocFolder = GetFolder(window.location.href);
function GetFolder(LocPath){
	LocPath = ReplaceStuff('\'','%27',LocPath);
	var i = LocPath.lastIndexOf('/');
	if (i<0){i=LocPath.lastIndexOf('\\')};
	return LocPath.substring(0,i);
}

function CombineURLs(InURL){
	var i = InURL.indexOf('../');
	var s = LocFolder;
	while (i >- 1){
		s = GetFolder(s);
		InURL = InURL.substring(3,InURL.length);
		i = InURL.indexOf('../');
	}
	return s + '/' + InURL;
}

x = new Array();
function ResolveURLs(InText,Attribute){
	x.length=0;
	var Temp = InText.toLowerCase();
	var z;
	var AttLen = Attribute.length + 2;
	var y=Temp.lastIndexOf(Attribute + '="');
	while (y>-1){
		var sLoc = y+AttLen;
		if (Temp.substring(sLoc,sLoc+5) != 'http:'){
			x[x.length]=new Array();
			x[x.length-1][0] = sLoc;
			z = Temp.indexOf('"',sLoc);
			x[x.length-1][1] = z;
			x[x.length-1][2] = InText.substring(sLoc,z);

		}
		Temp = Temp.substring(0,y);
		y=Temp.lastIndexOf(Attribute + '="');
	}
	for (var j=0; j<x.length; j++){
		InText = InText.substring(0,x[j][0]) + CombineURLs(x[j][2]) + InText.substring(x[j][1], InText.length);
	}
	return InText;
}



function ResolveAllURLs(Stuff){
	Stuff = ResolveURLs(Stuff,'href');
	Stuff = ResolveURLs(Stuff,'src');
	Stuff = ResolveURLs(Stuff,'parent.location');
	return Stuff;
}


var ExBGColor = '#bbbbee';



var PageBGColor = '#ffffff';



var NavBarColor = '#000066';


var TextColor = '#000000';
var CurrQNum = 0;
var ALetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
var CorrectIndicator = ':-)';
var IncorrectIndicator = 'X';
var YourScoreIs = 'Your score is ';
var Tries = 0;
var CorrectChoices = 0;
var ContinuousScoring = true;
var CorrectFirstTime = 'Questions answered correctly first time: ';var ExerciseTitle = 'Subjunctive 101: The fourth use';
var ExerciseSubtitle = 'Multiple-choice exercise';
var Instructions = 'Choose the correct answer for each question. Choose whether this trigger produces the indicative or the subjunctive. Remember, get up to the QUE and count how many things exist. If the answer is 0, it is subjunctive. If the answer is 1 or more, it is indicative.'; //'';
var ShuffleQs = true;
var ShuffleAs = false;
var DefaultRight = 'Correct!';
var DefaultWrong = 'Sorry! Try again.';
var QsToShow = 14;
var ShowOneByOne = false;
var ReadingURL = '';
var EraseFeedback = true;
var Score = 0;

var PreviousPage = history.length;



ReadingText='<html><head><meta name="author" content="Created with Hot Potatoes by Half-Baked Software, registered to Kathleen Bulger-Barnett."></meta><meta name="keywords" content="Hot Potatoes, Hot Potatoes, Half-Baked Software, Windows, University of Victoria"></meta><title>Subjunctive 101: The fourth use</title></head><body background="" bgcolor="#ffffff" text="#000000" link="#0000ff" vlink="#0000cc"><center><table border="0" cellpadding="5" cellspacing="1" width="85%"><tr><td align="center" bgcolor="#ffffff"><font size="+1" face="Geneva,Arial" color="#000033">Subjunctive 101: The fourth use<br></br></font></td></tr><tr><td bgcolor="#bbbbee"><font face="Geneva,Arial" size="-1" color="#000000">Spanish has two "moods". One is the indicative and the other is the subjunctive. The INDICATIVE mood INDICATES FACTS (My name is Miguel; It is sunny today; Last night I played soccer). The SUBJUNCTIVE reflects SUBJECTIVE PERCEPTIONS and UNTANGIBLES.<br /><br />Specifically, the subjunctive mood is used for three traditional reasons:<br />Wishing <br />Doubt<br />Emotions<br /><br />The Fourth reason for using a subjunctive is when one describes things that do not exist.<br /><br />Look at the first half of the sentence and when you get to the word "that" (or QUE in Spanish), count how many items you have in your possession. If the answer is 0, use the subjunctive in the second half of the sentence. For example, in the sentence "I am looking for a job that pays well" you do not have the job yet. In essence, it does not exist. Therefore, "pays well" would be in the subjunctive. On the other hand, the sentence " I have a job that pays well" tells us that you already have the job. Therefore, it would take the indicative.<br /><br /><br />Since things that do not exist comprise a fair number of subjunctive triggers, it is very important for students to be familiar with the vocabulary associated with this concept, so have your dictionary handy. Remember that the subjunctive is not real. Rather, it only reflects what the subject is wishing, doubting, feeling, or envisioning (p.s. that\'s why we call it subjective).<br /><br />More subjunctive quick facts: The "trigger" (wishing, doubt, emotion, things that do not exist) is in the indicative and the subjunctive traditionally falls in the latter part of the sentence. Furthermore, frequently there are two subjects, for example, WE do not know ANYONE who speaks English; THEY are looking for a CAR that is red; The TEACHER wants a BOOK that is interesting. The indicative part is real. Since the listener never knows the outcome of the subjunctive part, it is immeasurable, and therefore subjunctive. <br /><br />In this exercise, choose whether this trigger produces the indicative or the subjunctive. Remember, get up to the QUE and count how many things exist. If the answer is 0, it is subjunctive. If the answer is 1 or more, it is indicative.<br /></font></td></tr></table></center></body></html>';


if (is.CRAPBrowser){ReadingText=ResolveAllURLs(ReadingText);}


var NavBar='';


NavBar+='<tr><form name="NavButtons1" action=""><td bgcolor="#000066" align="center">';
NavBar+='<font face="Geneva,Arial" size="-1">';

NavBar+='<input type="button" value="&lt;=" onclick="parent.GoBack()"></input>';


NavBar+='<input type="button" value="Index" onclick=\'parent.location="index.htm"\'></input>';


NavBar+='<input type="button" value="=&gt;" onclick=\'parent.location="nextpage.htm"\'></input>';
NavBar+='</font></td></form></tr>';
if (is.CRAPBrowser){NavBar=ResolveAllURLs(NavBar)};


var TitleCode = '<tr><td align="center" valign="middle" bgcolor="#ffffff">';
TitleCode += '<font size="+1" face="Geneva,Arial" color="#000033">' + ExerciseTitle + '</font><br />';
TitleCode += '<font size="-1" face="Geneva,Arial" color="#000033">' + ExerciseSubtitle + '<br />';
TitleCode += '</font></td></tr>';

var QButtonsOpener = '<table border="0" width="85%" cellpadding="10">';
QButtonsOpener += '<tr><td align="center" valign="middle"><form>';
QButtonsOpener += '<font size="+1"><input type="button" value="&lt;=" onclick="parent.ChangeQ(-1)"></input>';
var QButtonsCloser = '<input type="button" value="=&gt;" onclick="parent.ChangeQ(1)"></input>';
QButtonsCloser += '</font></form></td></tr></table>';

var TableOpener = '<form name="QForm">';
TableOpener += '<table border="0" width="85%">';
var QRow = '<tr><td valign="top" bgcolor="#bbbbee" align="right">';
QRow += '<font size="+1" face="Geneva,Arial" color="#000000">[QNumber]</font></td>';
QRow += '<td colspan="3" valign="top" bgcolor="#bbbbee"><font size="-1" face="Geneva,Arial" color="#000000">[Question]<br />&nbsp;';
QRow += '</font></td></tr>';

var ARow = '<tr><td></td><td valign="top" bgcolor="#bbbbee"><input type="text" value=" " size="3" name="FB_[QNum]_[ANum]"></input></td>';
ARow += '<td valign="top" bgcolor="#bbbbee"><input type="button" value="[ALetter]" OnClick="parent.CheckAnswer([QNum],[ANum])"></input></td>';
ARow += '<td width="100%" bgcolor="#bbbbee"><font size="-1" face="Geneva,Arial" color="#000000">[Ans]</font></td></tr>';

var MARow = '<tr><td></td><td valign="top" bgcolor="#bbbbee" colspan="3"><input type="checkbox" name="A_[QNum]_[ANum]" value="[Correct]"></input>';
MARow += '<font size="-1" face="Geneva,Arial" color="#000000">[Ans]</font></td></tr>';

var CheckButton = '<tr><td></td><td valign="top" bgcolor="#bbbbee" ><input type="button" value="Check"';
CheckButton += ' onclick="parent.CheckMulti([QNum])"></input></td></tr>';

TableCloser = '</table></form>';

function GoBack(){
	var BackSkip = history.length - PreviousPage;
	if (BackSkip > 0){
		history.go((BackSkip+1)*-1);
	}
	else{
		parent.history.back();
	}
}

function ReduceItems(){
	var ItemToDump=0;
	var j=0;
	while (I.length > QsToShow){
		ItemToDump = Math.floor(I.length*Math.random());
		for (j=ItemToDump; j<(I.length-1); j++){
			I[j] = I[j+1];
		}
		I.length = I.length-1;
	}
}

function Shuffle(InArray){
	Temp = new Array();
	var Len = InArray.length;

	var j = Len;

	for (var i=0; i<Len; i++){
		Temp[i] = InArray[i];
	}

	for (i=0; i<Len; i++){
		Num = Math.floor(j  *  Math.random());
		InArray[i] = Temp[Num];

		for (var k=Num; k < j; k++) {
			Temp[k] = Temp[k+1];
		}
		j--;
	}
	return InArray;
}

function WriteFeedback(Feedback) {
//Build the output string
	var OutString = '';
	OutString += '<html>';
	OutString += '<body  background="" bgcolor="#ffffff" text="#000000" link="#0000ff" vlink="#0000cc">';
	OutString += '<center><table border="0" cellpadding="5" cellspacing="1" width="85%">';
	OutString += NavBar;
	if (Feedback.length>0){
		OutString += '<tr><td bgcolor="#bbbbee" align="center">'; 
		OutString += '<font face="Geneva,Arial" size="-1" color="#000000">';
		OutString += Feedback;
		OutString += '</font></td></tr>'
	}
	OutString += '</table></center></body></html>';

	if (is.CRAPBrowser){OutString=ResolveAllURLs(OutString);}

//Write it to the frame
	TopFrame.document.clear();
	TopFrame.document.open();
	TopFrame.document.write(OutString);
	TopFrame.document.close();
}

function StartUp(){




//Write the reading frame
	ShowReading();



//Reduce array if required
	if (QsToShow < I.length){
		ReduceItems();
	}

//Shuffle stuff if required

	if (ShuffleQs == true){
		I = Shuffle(I);
	}

	if (ShuffleAs == true){
		for (var i=0; i<I.length; i++){
			I[i][1] = Shuffle(I[i][1]);
		}
	}

//Create arrays
	CreateStatusArrays();



//Show the first question or all of them
	if (ShowOneByOne == false){
		ShowAllQs();
	}
	else{
		ShowQuestion(CurrQNum);
	}

//Write the top frame
	WriteFeedback(Instructions);
}


I = new Array();

I[0] = new Array();
I[0][0]='Conozco a un hombre que';
I[0][1] = new Array();
I[0][1][0] = new Array();
I[0][1][0][0]='Subjunctive';
I[0][1][0][1]='Wrong. You know him. He is real, so he takes the indicative.';
I[0][1][0][2] = 0;
I[0][1][1] = new Array();
I[0][1][1][0]='Indicative';
I[0][1][1][1]='Correct! You know him. He is real, so he takes the indicative.';
I[0][1][1][2] = 1;
I[0][2] = 0;

I[1] = new Array();
I[1][0]='Hay alguien en mi familia que';
I[1][1] = new Array();
I[1][1][0] = new Array();
I[1][1][0][0]='Subjunctive';
I[1][1][0][1]='Incorrect. The person exists.';
I[1][1][0][2] = 0;
I[1][1][1] = new Array();
I[1][1][1][0]='Indicative';
I[1][1][1][1]='Correct! The person exists.';
I[1][1][1][2] = 1;
I[1][2] = 0;

I[2] = new Array();
I[2][0]='No conozco a nadie que';
I[2][1] = new Array();
I[2][1][0] = new Array();
I[2][1][0][0]='Subjunctive';
I[2][1][0][1]='Correct! If you do not know them, they do not exist. You can be very egocentric in Spanish. ';
I[2][1][0][2] = 1;
I[2][1][1] = new Array();
I[2][1][1][0]='Indicative';
I[2][1][1][1]='Sorry! If you do not know them, they do not exist. You can be very egocentric in Spanish. ';
I[2][1][1][2] = 0;
I[2][2] = 0;

I[3] = new Array();
I[3][0]='Buscamos un apartamento que';
I[3][1] = new Array();
I[3][1][0] = new Array();
I[3][1][0][0]='Subjunctive';
I[3][1][0][1]='Correct! You do not have it yet, so it does not exist.';
I[3][1][0][2] = 1;
I[3][1][1] = new Array();
I[3][1][1][0]='Indicative';
I[3][1][1][1]='Incorrect. You do not have it yet, so it does not exist.';
I[3][1][1][2] = 0;
I[3][2] = 0;

I[4] = new Array();
I[4][0]='Necesitas unos zapatos que ';
I[4][1] = new Array();
I[4][1][0] = new Array();
I[4][1][0][0]='Subjunctive';
I[4][1][0][1]='Correct! You do not have them yet, so they do not exist.';
I[4][1][0][2] = 1;
I[4][1][1] = new Array();
I[4][1][1][0]='Indicative';
I[4][1][1][1]='Wrong. You do not have them yet, so they do not exist.';
I[4][1][1][2] = 0;
I[4][2] = 0;

I[5] = new Array();
I[5][0]='No hay nadie aqu&#237; que';
I[5][1] = new Array();
I[5][1][0] = new Array();
I[5][1][0][0]='Subjunctive';
I[5][1][0][1]='Muy bien!';
I[5][1][0][2] = 1;
I[5][1][1] = new Array();
I[5][1][1][0]='Indicative';
I[5][1][1][1]='Incorrect';
I[5][1][1][2] = 0;
I[5][2] = 0;

I[6] = new Array();
I[6][0]='No hay nadie en mi familia que';
I[6][1] = new Array();
I[6][1][0] = new Array();
I[6][1][0][0]='Subjunctive';
I[6][1][0][1]='Correct!';
I[6][1][0][2] = 1;
I[6][1][1] = new Array();
I[6][1][1][0]='Indicative';
I[6][1][1][1]='No. Try again.';
I[6][1][1][2] = 0;
I[6][2] = 0;

I[7] = new Array();
I[7][0]='No hay ninguna profesora que';
I[7][1] = new Array();
I[7][1][0] = new Array();
I[7][1][0][0]='Subjunctive';
I[7][1][0][1]='';
I[7][1][0][2] = 1;
I[7][1][1] = new Array();
I[7][1][1][0]='Indicative';
I[7][1][1][1]='';
I[7][1][1][2] = 0;
I[7][2] = 0;

I[8] = new Array();
I[8][0]='No tienen ning&#250;n pariente que';
I[8][1] = new Array();
I[8][1][0] = new Array();
I[8][1][0][0]='Subjunctive';
I[8][1][0][1]='Correct. They do not have any relatives--they do not exist.';
I[8][1][0][2] = 1;
I[8][1][1] = new Array();
I[8][1][1][0]='Indicative';
I[8][1][1][1]='Incorrect. They do not have any relatives--they do not exist.';
I[8][1][1][2] = 0;
I[8][2] = 0;

I[9] = new Array();
I[9][0]='Queremos comprar una casa que';
I[9][1] = new Array();
I[9][1][0] = new Array();
I[9][1][0][0]='Subjunctive';
I[9][1][0][1]='Muy bien! You do not own it yet, so subjunctive.';
I[9][1][0][2] = 1;
I[9][1][1] = new Array();
I[9][1][1][0]='Indicative';
I[9][1][1][1]='You do not own it yet, so subjunctive.';
I[9][1][1][2] = 0;
I[9][2] = 0;

I[10] = new Array();
I[10][0]='Quiero tener un coche que';
I[10][1] = new Array();
I[10][1][0] = new Array();
I[10][1][0][0]='Subjunctive';
I[10][1][0][1]='Correct. It does not exist yet.';
I[10][1][0][2] = 1;
I[10][1][1] = new Array();
I[10][1][1][0]='Indicative';
I[10][1][1][1]='Incorrect. It does not exist yet.';
I[10][1][1][2] = 0;
I[10][2] = 0;

I[11] = new Array();
I[11][0]='Tenemos un coche que';
I[11][1] = new Array();
I[11][1][0] = new Array();
I[11][1][0][0]='Subjunctive';
I[11][1][0][1]='Incorrect. You own the car, so it does exist.';
I[11][1][0][2] = 0;
I[11][1][1] = new Array();
I[11][1][1][0]='Indicative';
I[11][1][1][1]='Correct! You own the car, so it does exist.';
I[11][1][1][2] = 1;
I[11][2] = 0;

I[12] = new Array();
I[12][0]='Tengo un amigo que';
I[12][1] = new Array();
I[12][1][0] = new Array();
I[12][1][0][0]='Subjunctive';
I[12][1][0][1]='Incorrect. Your friend is real and exists.';
I[12][1][0][2] = 0;
I[12][1][1] = new Array();
I[12][1][1][0]='Indicative';
I[12][1][1][1]='Correct! Your friend is real and exists. ';
I[12][1][1][2] = 1;
I[12][2] = 0;

I[13] = new Array();
I[13][0]='Vivimos en una casa que';
I[13][1] = new Array();
I[13][1][0] = new Array();
I[13][1][0][0]='Subjunctive';
I[13][1][0][1]='Incorrect. The house is real, therefore indicative.';
I[13][1][0][2] = 0;
I[13][1][1] = new Array();
I[13][1][1][0]='Indicative';
I[13][1][1][1]='Correct! The house is real, therefore indicative.';
I[13][1][1][2] = 1;
I[13][2] = 0;


Status = new Array();


function CreateStatusArrays(){
	for (var x=0; x<I.length; x++){
		Status[x] = new Array();
		Status[x][0] = 0; // Question not done yet
		Status[x][1] = new Array(); //for tracking whether answers chosen
		for (var y=0; y<I[x][1].length; y++){
			Status[x][1][y] = '0'; //Answers not chosen yet
		}
		Status[x][2] = 0; //Wrong tries at this question so far
		Status[x][3] = 0; //For storing score out of one on this question
	}
}

function UpdateQuestionStatus(QNum){
	if (Status[QNum][2] >= Status[QNum][1].length-1){
		Status[QNum][0] = 1;
		for (var i=0; i<Status[QNum][1].length; i++){
			if (Status[QNum][1][i] == '0'){
				Status[QNum][1][i] = 'R';
			}
		}
	}
}

function ReplaceStuff(Token, Replacement, InString){
	var i = InString.indexOf(Token);
	var FirstBit = '';
	var LastBit = '';
	while (i>-1){
		FirstBit = InString.substring(0, i);
		LastBit = InString.substring(i + Token.length, InString.length);	
		InString = FirstBit + Replacement + LastBit;
		i = InString.indexOf(Token);
	}
	return InString;
}

function ChangeQ(ChangeBy){
	var NewNum = CurrQNum + ChangeBy;
	if ((NewNum >= 0)&&(NewNum<I.length)){
		CurrQNum = NewNum;
		ShowQuestion(CurrQNum);
	}
	var CurrScore = '';
	if ((ContinuousScoring == true)&&(EraseFeedback == true)){
		CalculateScore();
		var CurrScore = YourScoreIs + ' ' + Score + '%.';
		WriteFeedback(CurrScore);
	}
}

function BuildQuestion(QNum){
	if (I[QNum][2] == 0){
		var Temp = ReplaceStuff('[Question]', I[QNum][0], QRow);

		var AnsRows = '';
		for (var i=0; i<I[QNum][1].length; i++){
			TempAns = ARow;
			TempAns = ReplaceStuff('[ANum]', i, TempAns);
			TempAns = ReplaceStuff('[ALetter]', ' ' + ALetters.charAt(i) + ' ', TempAns);
			TempAns = ReplaceStuff('[Ans]', I[QNum][1][i][0], TempAns);
			AnsRows += TempAns;
		}
		Temp += AnsRows;
		Temp = ReplaceStuff('[QNumber]', QNum+1, Temp);
		Temp = ReplaceStuff('[QNum]', QNum, Temp);
	}
	else{
		var Temp = ReplaceStuff('[Question]', I[QNum][0], QRow);
		var AnsRows = '';
		for (var i=0; i<I[QNum][1].length; i++){
			TempAns = MARow;
			TempAns = ReplaceStuff('[ANum]', i, TempAns);
			TempAns = ReplaceStuff('[Correct]', I[QNum][1][i][2], TempAns);
			TempAns = ReplaceStuff('[Ans]', I[QNum][1][i][0], TempAns);
			AnsRows += TempAns;
		}
		Temp += AnsRows;
		Temp += CheckButton;
		Temp = ReplaceStuff('[QNumber]', QNum+1, Temp);
		Temp = ReplaceStuff('[QNum]', QNum, Temp);
	}
	return Temp;
}

function DisplayExercise(StuffToDisplay){
//Build the output string
	var OutString = '';
	OutString += '<html>';
	OutString += '<body  background="" bgcolor="#ffffff" text="#000000" link="#0000ff" vlink="#0000cc">';
	OutString += '<center><table border="0" cellpadding="5" cellspacing="1" width="85%">';
	OutString += TitleCode; 
	OutString += '<tr><td bgcolor="#bbbbee" align="center">'; 
	OutString += '<font face="Geneva,Arial" size="-1">';
	OutString += StuffToDisplay;
	OutString += '</font></td></tr>';
	OutString += NavBar;
	OutString += '</table></center></body></html>';

	if (is.CRAPBrowser){OutString=ResolveAllURLs(OutString);}

//Write it to the frame
	BottomFrame.document.clear();
	BottomFrame.document.open();
	BottomFrame.document.write(OutString);
	BottomFrame.document.close();
}


function ShowAllQs(){
	var Output = '';
	for (var i=0; i<I.length-1; i++){
		Output = Output + BuildQuestion(i);
		Output = Output + '<tr><td colspan="4"><hr></hr></td></tr>';
	}
	Output = Output + BuildQuestion(I.length-1);
	Output = TableOpener + Output + TableCloser;
	DisplayExercise(Output);
}

function ShowQuestion(QNum){
//First, create the Q number readout at the top
	var Readout = (QNum+1) + '/' + I.length;
	while (Readout.length < 7){
		Readout = ' ' + Readout + ' ';
	}
	Readout = QButtonsOpener + Readout + QButtonsCloser;

	var Output = BuildQuestion(QNum);

	Output = TableOpener + Output + TableCloser;

	DisplayExercise(Readout + Output);

//Mark the answers already done
	for (i=0; i<Status[QNum][1].length; i++){
		if (Status[QNum][1][i] == 'R'){
			MarkAnswer(QNum,i,true)
		}
		if (Status[QNum][1][i] == 'W'){
			MarkAnswer(QNum,i,false)
		}
		if (Status[QNum][1][i] == 'C'){
			CheckCheckbox(QNum,i);
		}
	}
//Eliminate feedback from previous question
	if (EraseFeedback == true){
		WriteFeedback('');
	}
}

function CheckMulti(QNum){
	var TotWrong = 0;
	var Output = '';
	var TotAns = I[QNum][1].length;
	for (var i=TotAns-1; i>=0; i--){
//Find any incorrect choices

		var b = eval('BottomFrame.document.QForm.A_' + QNum + '_' + i);

		if (b != null){
//if it's wrong, count it
			if (b.checked == true){
				Status[QNum][1][i] = 'C';
			}
			else{
				Status[QNum][1][i] = 'U';
			}
			if (((b.checked == true) && (b.value == "0"))||((b.checked == false)&&(b.value == "1"))){
				TotWrong++;
			}
		}				
	}

	if (TotWrong == 0){
		Output = DefaultRight;
	}
	else{
		Output = DefaultWrong + '<br />' + (TotAns-TotWrong) + '/' + TotAns;
	}

//If you haven't tried the question before
	if (Status[QNum][0] == 0){
		if (TotWrong > 0){
			Status[QNum][2]++;
		}
		if (TotWrong == 0){
			Status[QNum][0] = 1;
//Calculate the score for this question as a floating-point fraction of 1
			Status[QNum][3] =  ((Status[QNum][1].length - Status[QNum][2]) - 1) / (Status[QNum][1].length - 1);
//If less than zero, set to zero
			if (Status[QNum][3] < 0){Status[QNum][3] = 0;}
		}
	}

//Check whether the quiz is finished
	var Finished = true;
	for (var i=0; i<Status.length; i++){
		if (Status[i][0] == 0){Finished = false;}
	}

//Calculate the score if needed
		
	if (Status[QNum][0] == 1){
		if ((Finished==true)||(ContinuousScoring==true)){
			CalculateScore();
			Output = Output + '<br />' + YourScoreIs + ' ' + Score + '%.';
		}

		if (Finished == true){
			EraseFeedback = false;
			var CFT = 0;
			for (i=0; i<I.length; i++){
				if (Status[i][2] == 0){
					CFT++;
				}
			}
		Output += '<br />' + CorrectFirstTime + CFT + '/' + I.length;

		}
	}

//Show the feedback
	if (Output.length > 0){
		WriteFeedback(Output);
	}

}

function CheckAnswer(QNum, ANum){
	var Output = I[QNum][1][ANum][1];

	if (Output==''){
		if (I[QNum][1][ANum][2] == 1){
			Output = DefaultRight;
		}
		else{
			Output = DefaultWrong;
		}
	}

//If it's not been previously answered correctly
	if (Status[QNum][0] == 0){
//If it's a correct answer
		if (I[QNum][1][ANum][2] == 1){
			Status[QNum][0] = 1;//Mark the Q as done
			Status[QNum][1][ANum] = 'R';
			MarkAnswer(QNum, ANum, true);
//Calculate the score for this question as a floating-point fraction of 1
			var PossibleWrongs = 0;
			for (var i=0; i<I[QNum][1].length; i++){
				if (I[QNum][1][i][2] == 0){
					PossibleWrongs++;
				}
			}

			if (PossibleWrongs == 0){PossibleWrongs = 1;}

			Status[QNum][3] = 1 - (Status[QNum][2]/PossibleWrongs);

//If less than zero, set to zero
			if (Status[QNum][3] < 0){Status[QNum][3] = 0;}
		}
		else{
			if (Status[QNum][1][ANum] != 'W'){
				Status[QNum][1][ANum] = 'W';
				MarkAnswer(QNum, ANum, false);
				Status[QNum][2]++; //increment wrong tries for this Q
			}
		}
	}

	UpdateQuestionStatus(QNum);

//Check whether the quiz is finished
	var Finished = true;
	for (var i=0; i<Status.length; i++){
		if (Status[i][0] == 0){Finished = false;}

	}

//Calculate the score if needed
		
	if (Status[QNum][0] == 1){
		if ((Finished==true)||(ContinuousScoring==true)){
			CalculateScore();
			Output = Output + '<br />' + YourScoreIs + ' ' + Score + '%.';
		}

		if (Finished == true){
			EraseFeedback = false;
			var CFT = 0;
			for (i=0; i<I.length; i++){
				if (Status[i][2] == 0){
					CFT++;
				}
			}
		Output += '<br />' + CorrectFirstTime + CFT + '/' + I.length;

		}
	}

//Show the feedback
	if (Output.length > 0){
		WriteFeedback(Output);
	}
}

function CalculateScore(){
	var TriedQs = 0;
	var TotalScore = 0;
	for (var i=0; i<Status.length; i++){
		if ((Status[i][2] > 0)||(Status[i][3] == 1)){
			TriedQs++;
			TotalScore += Status[i][3];
		}
	}
	if (TriedQs == 0){
		Score = 0;
	}
	else{
		Score = (Math.floor(100 * (TotalScore/TriedQs)));
	}
}

function MarkAnswer(QNum, ANum, Right){
	var Mark = CorrectIndicator;
	if (Right == false){Mark = IncorrectIndicator;}

	if (eval('BottomFrame.document.QForm.FB_' + QNum + '_' + ANum) != null){
		eval('BottomFrame.document.QForm.FB_' + QNum + '_' + ANum).value = Mark;
	}
}

function CheckCheckbox(QNum, ANum){
	if (eval('BottomFrame.document.QForm.A_' + QNum + '_' + ANum) != null){
		eval('BottomFrame.document.QForm.A_' + QNum + '_' + ANum).checked = true;
	}
}


function ShowReading(){
	if (ReadingFrame != null){
		if (ReadingURL.length > 0){
			ReadingFrame.location.href=ReadingURL;
		}
		else{
			ReadingFrame.document.clear();
			ReadingFrame.document.open();
			ReadingFrame.document.write(ReadingText);
			ReadingFrame.document.close();
		}
	}
}






function Blank(){
	return '<html><body>&copy;Half-Baked Software. Loading...</body></html>';
}

//-->

//]]>

</script> 
 </head> 
 <!--<body>Fool those dumb ad-inserting ISPs</body>--> 
 <!--For full XHTML 1.0 compatibility, remove the border and framespacing attributes.
These are required for proper display in current browsers, but render the document incompatible. Then, you'll need to add the appropriate Document Type Declaration; use
the W3C XHTML 1 frameset DTD.--> 
 <frameset cols="50%,50%" framespacing="0" border="0"> 
  <frameset rows="25%,*" onload="StartUp()" framespacing="0" border="0"> 
   <frame src="javascript:parent.Blank()" frameborder="0" name="TopFrame"> 
   <frame src="javascript:parent.Blank()" frameborder="0" name="BottomFrame"> 
  </frameset> 
  <frame src="javascript:parent.Blank()" frameborder="0" name="ReadingFrame"> 
 </frameset>  
</html>