<html>
 <head>
  <meta name="author" content="Created with Hot Potatoes by Half-Baked Software, registered to Kathleen Bulger-Barnett.">
  <meta name="keywords" content="Hot Potatoes, Hot Potatoes, Half-Baked Software, Windows, University of Victoria"> 
  <title>
Subjunctive 101: Adverbial Clauses
</title> 
  <script language="javascript" type="text/javascript">

//<![CDATA[

<!--

// BrowserCheck Object

function BrowserCheck() {
	var b = navigator.appName
//HBS extension
	this.mac = (navigator.appVersion.indexOf('Mac') != -1)
	if (b=="Netscape") this.b = "ns"
	else if (b=="Microsoft Internet Explorer") this.b = "ie"
	else this.b = b
	this.version = navigator.appVersion
	this.v = parseInt(this.version)
	this.ns = (this.b=="ns" && this.v>=4)
	this.ns4 = (this.b=="ns" && this.v==4)
	this.ns5 = (this.b=="ns" && this.v==5)
	this.ie = (this.b=="ie" && this.v>=4)
	this.ie4 = (this.version.indexOf('MSIE 4')>0)
	this.ie5 = (this.version.indexOf('MSIE 5')>0)
	this.min = (this.ns||this.ie)
	this.CRAPBrowser = (this.ie4 && this.mac); //Cannot Resolve Addresses Properly
}

is = new BrowserCheck();

var LocFolder = GetFolder(window.location.href);
function GetFolder(LocPath){
	LocPath = ReplaceStuff('\'','%27',LocPath);
	var i = LocPath.lastIndexOf('/');
	if (i<0){i=LocPath.lastIndexOf('\\')};
	return LocPath.substring(0,i);
}

function CombineURLs(InURL){
	var i = InURL.indexOf('../');
	var s = LocFolder;
	while (i >- 1){
		s = GetFolder(s);
		InURL = InURL.substring(3,InURL.length);
		i = InURL.indexOf('../');
	}
	return s + '/' + InURL;
}

x = new Array();
function ResolveURLs(InText,Attribute){
	x.length=0;
	var Temp = InText.toLowerCase();
	var z;
	var AttLen = Attribute.length + 2;
	var y=Temp.lastIndexOf(Attribute + '="');
	while (y>-1){
		var sLoc = y+AttLen;
		if (Temp.substring(sLoc,sLoc+5) != 'http:'){
			x[x.length]=new Array();
			x[x.length-1][0] = sLoc;
			z = Temp.indexOf('"',sLoc);
			x[x.length-1][1] = z;
			x[x.length-1][2] = InText.substring(sLoc,z);

		}
		Temp = Temp.substring(0,y);
		y=Temp.lastIndexOf(Attribute + '="');
	}
	for (var j=0; j<x.length; j++){
		InText = InText.substring(0,x[j][0]) + CombineURLs(x[j][2]) + InText.substring(x[j][1], InText.length);
	}
	return InText;
}



function ResolveAllURLs(Stuff){
	Stuff = ResolveURLs(Stuff,'href');
	Stuff = ResolveURLs(Stuff,'src');
	Stuff = ResolveURLs(Stuff,'parent.location');
	return Stuff;
}


var ExBGColor = '#bbbbee';



var PageBGColor = '#ffffff';



var NavBarColor = '#000066';


var TextColor = '#000000';
var CurrQNum = 0;
var ALetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
var CorrectIndicator = ':-)';
var IncorrectIndicator = 'X';
var YourScoreIs = 'Your score is ';
var Tries = 0;
var CorrectChoices = 0;
var ContinuousScoring = true;
var CorrectFirstTime = 'Questions answered correctly first time: ';var ExerciseTitle = 'Subjunctive 101: Adverbial Clauses';
var ExerciseSubtitle = 'Multiple-choice exercise';
var Instructions = 'Choose the correct answer for each question. Identify the type of subjunctive trigger: Purpose, Time, or Provision. Have your dictionary nearby. '; //'';
var ShuffleQs = true;
var ShuffleAs = true;
var DefaultRight = 'Correct!';
var DefaultWrong = 'Sorry! Try again.';
var QsToShow = 11;
var ShowOneByOne = false;
var ReadingURL = '';
var EraseFeedback = true;
var Score = 0;

var PreviousPage = history.length;



ReadingText='<html><head><meta name="author" content="Created with Hot Potatoes by Half-Baked Software, registered to Kathleen Bulger-Barnett."></meta><meta name="keywords" content="Hot Potatoes, Hot Potatoes, Half-Baked Software, Windows, University of Victoria"></meta><title>Subjunctive 101: Adverbial Clauses</title></head><body background="" bgcolor="#ffffff" text="#000000" link="#0000ff" vlink="#0000cc"><center><table border="0" cellpadding="5" cellspacing="1" width="85%"><tr><td align="center" bgcolor="#ffffff"><font size="+1" face="Geneva,Arial" color="#000033">Subjunctive 101: Adverbial Clauses<br></br></font></td></tr><tr><td bgcolor="#bbbbee"><font face="Geneva,Arial" size="-1" color="#000000">Subjunctive 101: Final reason--Adverbial clauses <br /><br />Spanish has two "moods". One is the indicative and the other is the subjunctive. The INDICATIVE mood INDICATES FACTS (My name is Miguel; It is sunny today; Last night I played soccer). The SUBJUNCTIVE reflects SUBJECTIVE PERCEPTIONS and UNTANGIBLES.<br /><br />Specifically, the subjunctive mood is used for three traditional reasons:<br />Wishing (I hope that it is sunny)<br />Doubt (We doubt that the train is on time)<br />Emotions (He is glad that she is well)<br /><br />The Fourth reason for using a subjunctive is when one describes things that do not exist, such as " I am looking for a car that goes fast". Until you have the car, it does not exist and everything that describes it should be in the subjunctive.<br /><br />The final trigger for the subjunctive is a group lumped together and called ADVERBIAL CLAUSES. There are three types of adverbial clauses, which cause the subjunctive:<br /><br />1. Purpose/Result (so that, in order to)<br />2. Time when it prevents completion (After/When I graduate I will go on a cruise)<br />3. Provision that prevents completion (unless, provided that)<br /><br />Since purpose, time, and provisional clauses comprise a fair number of subjunctive triggers, it is very important for students to be familiar with the vocabulary associated with this concept, so have your dictionary handy. Remember that the subjunctive is not real. Rather, it only reflects what the subject is wishing, doubting, feeling, or envisioning. (P.S. that\'s why we call it subjective). Furthermore, with adverbial clauses of purpose, time, and provision, one never sees the final product. <br /><br />More subjunctive quick facts: In the traditional subjunctive triggers of wishing, doubt, emotion, and things that do not exist, the subjunctive traditionally falls in the latter part of the sentence. HOWEVER, that is not the case with adverbial clauses. Rather, the subjunctive falls after the purpose/time/provisional word, regardless of where that lies in the sentence. <br /><br />	For example: "I will buy a car as soon as I have a job" and "As soon as I have a job I will buy a car" are the same. In BOTH sentences, the subjunctive falls after the time clause "as soon as". <br /></font></td></tr></table></center></body></html>';


if (is.CRAPBrowser){ReadingText=ResolveAllURLs(ReadingText);}


var NavBar='';


NavBar+='<tr><form name="NavButtons1" action=""><td bgcolor="#000066" align="center">';
NavBar+='<font face="Geneva,Arial" size="-1">';

NavBar+='<input type="button" value="&lt;=" onclick="parent.GoBack()"></input>';


NavBar+='<input type="button" value="Index" onclick=\'parent.location="index.htm"\'></input>';


NavBar+='<input type="button" value="=&gt;http://academics.vmi.edu/modlan_kbb/kbb/vmispanishdrills.htm" onclick=\'parent.location="nextpage.htm"\'></input>';
NavBar+='</font></td></form></tr>';
if (is.CRAPBrowser){NavBar=ResolveAllURLs(NavBar)};


var TitleCode = '<tr><td align="center" valign="middle" bgcolor="#ffffff">';
TitleCode += '<font size="+1" face="Geneva,Arial" color="#000033">' + ExerciseTitle + '</font><br />';
TitleCode += '<font size="-1" face="Geneva,Arial" color="#000033">' + ExerciseSubtitle + '<br />';
TitleCode += '</font></td></tr>';

var QButtonsOpener = '<table border="0" width="85%" cellpadding="10">';
QButtonsOpener += '<tr><td align="center" valign="middle"><form>';
QButtonsOpener += '<font size="+1"><input type="button" value="&lt;=" onclick="parent.ChangeQ(-1)"></input>';
var QButtonsCloser = '<input type="button" value="=&gt;" onclick="parent.ChangeQ(1)"></input>';
QButtonsCloser += '</font></form></td></tr></table>';

var TableOpener = '<form name="QForm">';
TableOpener += '<table border="0" width="85%">';
var QRow = '<tr><td valign="top" bgcolor="#bbbbee" align="right">';
QRow += '<font size="+1" face="Geneva,Arial" color="#000000">[QNumber]</font></td>';
QRow += '<td colspan="3" valign="top" bgcolor="#bbbbee"><font size="-1" face="Geneva,Arial" color="#000000">[Question]<br />&nbsp;';
QRow += '</font></td></tr>';

var ARow = '<tr><td></td><td valign="top" bgcolor="#bbbbee"><input type="text" value=" " size="3" name="FB_[QNum]_[ANum]"></input></td>';
ARow += '<td valign="top" bgcolor="#bbbbee"><input type="button" value="[ALetter]" OnClick="parent.CheckAnswer([QNum],[ANum])"></input></td>';
ARow += '<td width="100%" bgcolor="#bbbbee"><font size="-1" face="Geneva,Arial" color="#000000">[Ans]</font></td></tr>';

var MARow = '<tr><td></td><td valign="top" bgcolor="#bbbbee" colspan="3"><input type="checkbox" name="A_[QNum]_[ANum]" value="[Correct]"></input>';
MARow += '<font size="-1" face="Geneva,Arial" color="#000000">[Ans]</font></td></tr>';

var CheckButton = '<tr><td></td><td valign="top" bgcolor="#bbbbee" ><input type="button" value="Check"';
CheckButton += ' onclick="parent.CheckMulti([QNum])"></input></td></tr>';

TableCloser = '</table></form>';

function GoBack(){
	var BackSkip = history.length - PreviousPage;
	if (BackSkip > 0){
		history.go((BackSkip+1)*-1);
	}
	else{
		parent.history.back();
	}
}

function ReduceItems(){
	var ItemToDump=0;
	var j=0;
	while (I.length > QsToShow){
		ItemToDump = Math.floor(I.length*Math.random());
		for (j=ItemToDump; j<(I.length-1); j++){
			I[j] = I[j+1];
		}
		I.length = I.length-1;
	}
}

function Shuffle(InArray){
	Temp = new Array();
	var Len = InArray.length;

	var j = Len;

	for (var i=0; i<Len; i++){
		Temp[i] = InArray[i];
	}

	for (i=0; i<Len; i++){
		Num = Math.floor(j  *  Math.random());
		InArray[i] = Temp[Num];

		for (var k=Num; k < j; k++) {
			Temp[k] = Temp[k+1];
		}
		j--;
	}
	return InArray;
}

function WriteFeedback(Feedback) {
//Build the output string
	var OutString = '';
	OutString += '<html>';
	OutString += '<body  background="" bgcolor="#ffffff" text="#000000" link="#0000ff" vlink="#0000cc">';
	OutString += '<center><table border="0" cellpadding="5" cellspacing="1" width="85%">';
	OutString += NavBar;
	if (Feedback.length>0){
		OutString += '<tr><td bgcolor="#bbbbee" align="center">'; 
		OutString += '<font face="Geneva,Arial" size="-1" color="#000000">';
		OutString += Feedback;
		OutString += '</font></td></tr>'
	}
	OutString += '</table></center></body></html>';

	if (is.CRAPBrowser){OutString=ResolveAllURLs(OutString);}

//Write it to the frame
	TopFrame.document.clear();
	TopFrame.document.open();
	TopFrame.document.write(OutString);
	TopFrame.document.close();
}

function StartUp(){




//Write the reading frame
	ShowReading();



//Reduce array if required
	if (QsToShow < I.length){
		ReduceItems();
	}

//Shuffle stuff if required

	if (ShuffleQs == true){
		I = Shuffle(I);
	}

	if (ShuffleAs == true){
		for (var i=0; i<I.length; i++){
			I[i][1] = Shuffle(I[i][1]);
		}
	}

//Create arrays
	CreateStatusArrays();



//Show the first question or all of them
	if (ShowOneByOne == false){
		ShowAllQs();
	}
	else{
		ShowQuestion(CurrQNum);
	}

//Write the top frame
	WriteFeedback(Instructions);
}


I = new Array();

I[0] = new Array();
I[0][0]='A fin de que';
I[0][1] = new Array();
I[0][1][0] = new Array();
I[0][1][0][0]='Purpose';
I[0][1][0][1]='Correct! A fin de que suggests a projected result.';
I[0][1][0][2] = 1;
I[0][1][1] = new Array();
I[0][1][1][0]='Time';
I[0][1][1][1]='A fin de que suggests a projected result.';
I[0][1][1][2] = 0;
I[0][1][2] = new Array();
I[0][1][2][0]='Provision';
I[0][1][2][1]='A fin de que suggests a projected result.';
I[0][1][2][2] = 0;
I[0][2] = 0;

I[1] = new Array();
I[1][0]='A menos que';
I[1][1] = new Array();
I[1][1][0] = new Array();
I[1][1][0][0]='Purpose';
I[1][1][0][1]='A menos que means "unless" so it is a provision.';
I[1][1][0][2] = 0;
I[1][1][1] = new Array();
I[1][1][1][0]='Time';
I[1][1][1][1]='A menos que means "unless" so it is a provision.';
I[1][1][1][2] = 0;
I[1][1][2] = new Array();
I[1][1][2][0]='Provision';
I[1][1][2][1]='A menos que means "unless" so it is a provision.';
I[1][1][2][2] = 1;
I[1][2] = 0;

I[2] = new Array();
I[2][0]='Antes de que';
I[2][1] = new Array();
I[2][1][0] = new Array();
I[2][1][0][0]='Purpose';
I[2][1][0][1]='"Before" is a time clause that might block progress.';
I[2][1][0][2] = 0;
I[2][1][1] = new Array();
I[2][1][1][0]='Time';
I[2][1][1][1]='"Before" is a time clause that might block progress.';
I[2][1][1][2] = 1;
I[2][1][2] = new Array();
I[2][1][2][0]='Provision';
I[2][1][2][1]='"Before" is a time clause that might block progress.';
I[2][1][2][2] = 0;
I[2][2] = 0;

I[3] = new Array();
I[3][0]='En caso de que';
I[3][1] = new Array();
I[3][1][0] = new Array();
I[3][1][0][0]='Purpose';
I[3][1][0][1]='"In case" always takes subjunctive';
I[3][1][0][2] = 1;
I[3][1][1] = new Array();
I[3][1][1][0]='Time';
I[3][1][1][1]='"In case" always takes subjunctive';
I[3][1][1][2] = 1;
I[3][1][2] = new Array();
I[3][1][2][0]='Provision';
I[3][1][2][1]='"In case" always takes subjunctive';
I[3][1][2][2] = 1;
I[3][2] = 0;

I[4] = new Array();
I[4][0]='Con tal de que';
I[4][1] = new Array();
I[4][1][0] = new Array();
I[4][1][0][0]='Purpose';
I[4][1][0][1]='"Provided that" is a provisional clause that takes subjunctive.';
I[4][1][0][2] = 0;
I[4][1][1] = new Array();
I[4][1][1][0]='Time';
I[4][1][1][1]='"Provided that" is a provisional clause that taks subjunctive.';
I[4][1][1][2] = 0;
I[4][1][2] = new Array();
I[4][1][2][0]='Provision';
I[4][1][2][1]='"Provided that" is a provisional clause that takes subjunctive.';
I[4][1][2][2] = 1;
I[4][2] = 0;

I[5] = new Array();
I[5][0]='Cuando';
I[5][1] = new Array();
I[5][1][0] = new Array();
I[5][1][0][0]='Purpose';
I[5][1][0][1]='When "cuando" blocks completion, it takes subjunctive. When "cuando" is habitual action, it takes indicative.';
I[5][1][0][2] = 0;
I[5][1][1] = new Array();
I[5][1][1][0]='Time';
I[5][1][1][1]='When "cuando" blocks completion, it takes subjunctive. When "cuando" is habitual action, it takes indicative.';
I[5][1][1][2] = 1;
I[5][1][2] = new Array();
I[5][1][2][0]='Provision';
I[5][1][2][1]='When "cuando" blocks completion, it takes subjunctive. When "cuando" is habitual action, it takes indicative.';
I[5][1][2][2] = 0;
I[5][2] = 0;

I[6] = new Array();
I[6][0]='Despu&#233;s de que';
I[6][1] = new Array();
I[6][1][0] = new Array();
I[6][1][0][0]='Purpose';
I[6][1][0][1]='When "despu&#233;s de que" blocks completion, it takes subjunctive. When it suggests habitual action, it takes indicative.';
I[6][1][0][2] = 0;
I[6][1][1] = new Array();
I[6][1][1][0]='Time';
I[6][1][1][1]='When "despu&#233;s de que" blocks completion, it takes subjunctive. When it suggests habitual action, it takes indicative.';
I[6][1][1][2] = 1;
I[6][1][2] = new Array();
I[6][1][2][0]='Provision';
I[6][1][2][1]='When "despu&#233;s de que" blocks completion, it takes subjunctive. When it suggests habitual action, it takes indicative.';
I[6][1][2][2] = 0;
I[6][2] = 0;

I[7] = new Array();
I[7][0]='Para que';
I[7][1] = new Array();
I[7][1][0] = new Array();
I[7][1][0][0]='Purpose';
I[7][1][0][1]='"Para que" suggests a purpose/result, so it triggers subjunctive. ';
I[7][1][0][2] = 1;
I[7][1][1] = new Array();
I[7][1][1][0]='Time';
I[7][1][1][1]='"Para que" suggests a purpose/result, so it triggers subjunctive. ';
I[7][1][1][2] = 0;
I[7][1][2] = new Array();
I[7][1][2][0]='Provision';
I[7][1][2][1]='"Para que" suggests a purpose/result, so it triggers subjunctive. ';
I[7][1][2][2] = 0;
I[7][2] = 0;

I[8] = new Array();
I[8][0]='Sin que';
I[8][1] = new Array();
I[8][1][0] = new Array();
I[8][1][0][0]='Purpose';
I[8][1][0][1]='A provision.';
I[8][1][0][2] = 0;
I[8][1][1] = new Array();
I[8][1][1][0]='Time';
I[8][1][1][1]='A provision.';
I[8][1][1][2] = 0;
I[8][1][2] = new Array();
I[8][1][2][0]='Provision';
I[8][1][2][1]='A provision.';
I[8][1][2][2] = 1;
I[8][2] = 0;

I[9] = new Array();
I[9][0]='Hasta que';
I[9][1] = new Array();
I[9][1][0] = new Array();
I[9][1][0][0]='Purpose';
I[9][1][0][1]='A time clause.';
I[9][1][0][2] = 0;
I[9][1][1] = new Array();
I[9][1][1][0]='Time';
I[9][1][1][1]='A time clause.';
I[9][1][1][2] = 1;
I[9][1][2] = new Array();
I[9][1][2][0]='Provision';
I[9][1][2][1]='A time clause.';
I[9][1][2][2] = 0;
I[9][2] = 0;

I[10] = new Array();
I[10][0]='Tan pronto como';
I[10][1] = new Array();
I[10][1][0] = new Array();
I[10][1][0][0]='Purpose';
I[10][1][0][1]='A time clause.';
I[10][1][0][2] = 0;
I[10][1][1] = new Array();
I[10][1][1][0]='Time';
I[10][1][1][1]='A time clause.';
I[10][1][1][2] = 1;
I[10][1][2] = new Array();
I[10][1][2][0]='Provision';
I[10][1][2][1]='A time clause.';
I[10][1][2][2] = 0;
I[10][2] = 0;


Status = new Array();


function CreateStatusArrays(){
	for (var x=0; x<I.length; x++){
		Status[x] = new Array();
		Status[x][0] = 0; // Question not done yet
		Status[x][1] = new Array(); //for tracking whether answers chosen
		for (var y=0; y<I[x][1].length; y++){
			Status[x][1][y] = '0'; //Answers not chosen yet
		}
		Status[x][2] = 0; //Wrong tries at this question so far
		Status[x][3] = 0; //For storing score out of one on this question
	}
}

function UpdateQuestionStatus(QNum){
	if (Status[QNum][2] >= Status[QNum][1].length-1){
		Status[QNum][0] = 1;
		for (var i=0; i<Status[QNum][1].length; i++){
			if (Status[QNum][1][i] == '0'){
				Status[QNum][1][i] = 'R';
			}
		}
	}
}

function ReplaceStuff(Token, Replacement, InString){
	var i = InString.indexOf(Token);
	var FirstBit = '';
	var LastBit = '';
	while (i>-1){
		FirstBit = InString.substring(0, i);
		LastBit = InString.substring(i + Token.length, InString.length);	
		InString = FirstBit + Replacement + LastBit;
		i = InString.indexOf(Token);
	}
	return InString;
}

function ChangeQ(ChangeBy){
	var NewNum = CurrQNum + ChangeBy;
	if ((NewNum >= 0)&&(NewNum<I.length)){
		CurrQNum = NewNum;
		ShowQuestion(CurrQNum);
	}
	var CurrScore = '';
	if ((ContinuousScoring == true)&&(EraseFeedback == true)){
		CalculateScore();
		var CurrScore = YourScoreIs + ' ' + Score + '%.';
		WriteFeedback(CurrScore);
	}
}

function BuildQuestion(QNum){
	if (I[QNum][2] == 0){
		var Temp = ReplaceStuff('[Question]', I[QNum][0], QRow);

		var AnsRows = '';
		for (var i=0; i<I[QNum][1].length; i++){
			TempAns = ARow;
			TempAns = ReplaceStuff('[ANum]', i, TempAns);
			TempAns = ReplaceStuff('[ALetter]', ' ' + ALetters.charAt(i) + ' ', TempAns);
			TempAns = ReplaceStuff('[Ans]', I[QNum][1][i][0], TempAns);
			AnsRows += TempAns;
		}
		Temp += AnsRows;
		Temp = ReplaceStuff('[QNumber]', QNum+1, Temp);
		Temp = ReplaceStuff('[QNum]', QNum, Temp);
	}
	else{
		var Temp = ReplaceStuff('[Question]', I[QNum][0], QRow);
		var AnsRows = '';
		for (var i=0; i<I[QNum][1].length; i++){
			TempAns = MARow;
			TempAns = ReplaceStuff('[ANum]', i, TempAns);
			TempAns = ReplaceStuff('[Correct]', I[QNum][1][i][2], TempAns);
			TempAns = ReplaceStuff('[Ans]', I[QNum][1][i][0], TempAns);
			AnsRows += TempAns;
		}
		Temp += AnsRows;
		Temp += CheckButton;
		Temp = ReplaceStuff('[QNumber]', QNum+1, Temp);
		Temp = ReplaceStuff('[QNum]', QNum, Temp);
	}
	return Temp;
}

function DisplayExercise(StuffToDisplay){
//Build the output string
	var OutString = '';
	OutString += '<html>';
	OutString += '<body  background="" bgcolor="#ffffff" text="#000000" link="#0000ff" vlink="#0000cc">';
	OutString += '<center><table border="0" cellpadding="5" cellspacing="1" width="85%">';
	OutString += TitleCode; 
	OutString += '<tr><td bgcolor="#bbbbee" align="center">'; 
	OutString += '<font face="Geneva,Arial" size="-1">';
	OutString += StuffToDisplay;
	OutString += '</font></td></tr>';
	OutString += NavBar;
	OutString += '</table></center></body></html>';

	if (is.CRAPBrowser){OutString=ResolveAllURLs(OutString);}

//Write it to the frame
	BottomFrame.document.clear();
	BottomFrame.document.open();
	BottomFrame.document.write(OutString);
	BottomFrame.document.close();
}


function ShowAllQs(){
	var Output = '';
	for (var i=0; i<I.length-1; i++){
		Output = Output + BuildQuestion(i);
		Output = Output + '<tr><td colspan="4"><hr></hr></td></tr>';
	}
	Output = Output + BuildQuestion(I.length-1);
	Output = TableOpener + Output + TableCloser;
	DisplayExercise(Output);
}

function ShowQuestion(QNum){
//First, create the Q number readout at the top
	var Readout = (QNum+1) + '/' + I.length;
	while (Readout.length < 7){
		Readout = ' ' + Readout + ' ';
	}
	Readout = QButtonsOpener + Readout + QButtonsCloser;

	var Output = BuildQuestion(QNum);

	Output = TableOpener + Output + TableCloser;

	DisplayExercise(Readout + Output);

//Mark the answers already done
	for (i=0; i<Status[QNum][1].length; i++){
		if (Status[QNum][1][i] == 'R'){
			MarkAnswer(QNum,i,true)
		}
		if (Status[QNum][1][i] == 'W'){
			MarkAnswer(QNum,i,false)
		}
		if (Status[QNum][1][i] == 'C'){
			CheckCheckbox(QNum,i);
		}
	}
//Eliminate feedback from previous question
	if (EraseFeedback == true){
		WriteFeedback('');
	}
}

function CheckMulti(QNum){
	var TotWrong = 0;
	var Output = '';
	var TotAns = I[QNum][1].length;
	for (var i=TotAns-1; i>=0; i--){
//Find any incorrect choices

		var b = eval('BottomFrame.document.QForm.A_' + QNum + '_' + i);

		if (b != null){
//if it's wrong, count it
			if (b.checked == true){
				Status[QNum][1][i] = 'C';
			}
			else{
				Status[QNum][1][i] = 'U';
			}
			if (((b.checked == true) && (b.value == "0"))||((b.checked == false)&&(b.value == "1"))){
				TotWrong++;
			}
		}				
	}

	if (TotWrong == 0){
		Output = DefaultRight;
	}
	else{
		Output = DefaultWrong + '<br />' + (TotAns-TotWrong) + '/' + TotAns;
	}

//If you haven't tried the question before
	if (Status[QNum][0] == 0){
		if (TotWrong > 0){
			Status[QNum][2]++;
		}
		if (TotWrong == 0){
			Status[QNum][0] = 1;
//Calculate the score for this question as a floating-point fraction of 1
			Status[QNum][3] =  ((Status[QNum][1].length - Status[QNum][2]) - 1) / (Status[QNum][1].length - 1);
//If less than zero, set to zero
			if (Status[QNum][3] < 0){Status[QNum][3] = 0;}
		}
	}

//Check whether the quiz is finished
	var Finished = true;
	for (var i=0; i<Status.length; i++){
		if (Status[i][0] == 0){Finished = false;}
	}

//Calculate the score if needed
		
	if (Status[QNum][0] == 1){
		if ((Finished==true)||(ContinuousScoring==true)){
			CalculateScore();
			Output = Output + '<br />' + YourScoreIs + ' ' + Score + '%.';
		}

		if (Finished == true){
			EraseFeedback = false;
			var CFT = 0;
			for (i=0; i<I.length; i++){
				if (Status[i][2] == 0){
					CFT++;
				}
			}
		Output += '<br />' + CorrectFirstTime + CFT + '/' + I.length;

		}
	}

//Show the feedback
	if (Output.length > 0){
		WriteFeedback(Output);
	}

}

function CheckAnswer(QNum, ANum){
	var Output = I[QNum][1][ANum][1];

	if (Output==''){
		if (I[QNum][1][ANum][2] == 1){
			Output = DefaultRight;
		}
		else{
			Output = DefaultWrong;
		}
	}

//If it's not been previously answered correctly
	if (Status[QNum][0] == 0){
//If it's a correct answer
		if (I[QNum][1][ANum][2] == 1){
			Status[QNum][0] = 1;//Mark the Q as done
			Status[QNum][1][ANum] = 'R';
			MarkAnswer(QNum, ANum, true);
//Calculate the score for this question as a floating-point fraction of 1
			var PossibleWrongs = 0;
			for (var i=0; i<I[QNum][1].length; i++){
				if (I[QNum][1][i][2] == 0){
					PossibleWrongs++;
				}
			}

			if (PossibleWrongs == 0){PossibleWrongs = 1;}

			Status[QNum][3] = 1 - (Status[QNum][2]/PossibleWrongs);

//If less than zero, set to zero
			if (Status[QNum][3] < 0){Status[QNum][3] = 0;}
		}
		else{
			if (Status[QNum][1][ANum] != 'W'){
				Status[QNum][1][ANum] = 'W';
				MarkAnswer(QNum, ANum, false);
				Status[QNum][2]++; //increment wrong tries for this Q
			}
		}
	}

	UpdateQuestionStatus(QNum);

//Check whether the quiz is finished
	var Finished = true;
	for (var i=0; i<Status.length; i++){
		if (Status[i][0] == 0){Finished = false;}

	}

//Calculate the score if needed
		
	if (Status[QNum][0] == 1){
		if ((Finished==true)||(ContinuousScoring==true)){
			CalculateScore();
			Output = Output + '<br />' + YourScoreIs + ' ' + Score + '%.';
		}

		if (Finished == true){
			EraseFeedback = false;
			var CFT = 0;
			for (i=0; i<I.length; i++){
				if (Status[i][2] == 0){
					CFT++;
				}
			}
		Output += '<br />' + CorrectFirstTime + CFT + '/' + I.length;

		}
	}

//Show the feedback
	if (Output.length > 0){
		WriteFeedback(Output);
	}
}

function CalculateScore(){
	var TriedQs = 0;
	var TotalScore = 0;
	for (var i=0; i<Status.length; i++){
		if ((Status[i][2] > 0)||(Status[i][3] == 1)){
			TriedQs++;
			TotalScore += Status[i][3];
		}
	}
	if (TriedQs == 0){
		Score = 0;
	}
	else{
		Score = (Math.floor(100 * (TotalScore/TriedQs)));
	}
}

function MarkAnswer(QNum, ANum, Right){
	var Mark = CorrectIndicator;
	if (Right == false){Mark = IncorrectIndicator;}

	if (eval('BottomFrame.document.QForm.FB_' + QNum + '_' + ANum) != null){
		eval('BottomFrame.document.QForm.FB_' + QNum + '_' + ANum).value = Mark;
	}
}

function CheckCheckbox(QNum, ANum){
	if (eval('BottomFrame.document.QForm.A_' + QNum + '_' + ANum) != null){
		eval('BottomFrame.document.QForm.A_' + QNum + '_' + ANum).checked = true;
	}
}


function ShowReading(){
	if (ReadingFrame != null){
		if (ReadingURL.length > 0){
			ReadingFrame.location.href=ReadingURL;
		}
		else{
			ReadingFrame.document.clear();
			ReadingFrame.document.open();
			ReadingFrame.document.write(ReadingText);
			ReadingFrame.document.close();
		}
	}
}






function Blank(){
	return '<html><body>&copy;Half-Baked Software. Loading...</body></html>';
}

//-->

//]]>

</script> 
 </head> 
 <!--<body>Fool those dumb ad-inserting ISPs</body>--> 
 <!--For full XHTML 1.0 compatibility, remove the border and framespacing attributes.
These are required for proper display in current browsers, but render the document incompatible. Then, you'll need to add the appropriate Document Type Declaration; use
the W3C XHTML 1 frameset DTD.--> 
 <frameset cols="50%,50%" framespacing="0" border="0"> 
  <frameset rows="25%,*" onload="StartUp()" framespacing="0" border="0"> 
   <frame src="javascript:parent.Blank()" frameborder="0" name="TopFrame"> 
   <frame src="javascript:parent.Blank()" frameborder="0" name="BottomFrame"> 
  </frameset> 
  <frame src="javascript:parent.Blank()" frameborder="0" name="ReadingFrame"> 
 </frameset>  
</html>