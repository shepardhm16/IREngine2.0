<html>
 <head>
  <meta name="author" content="Created with Hot Potatoes by Half-Baked Software, registered to Kathleen Bulger-Barnett.">
  <meta name="keywords" content="Hot Potatoes, Hot Potatoes, Half-Baked Software, Windows, University of Victoria"> 
  <title>
Late Elementary Review I
</title> 
  <script language="javascript" type="text/javascript">

//<![CDATA[

<!--

// BrowserCheck Object

function BrowserCheck() {
	var b = navigator.appName
//HBS extension
	this.mac = (navigator.appVersion.indexOf('Mac') != -1)
	if (b=="Netscape") this.b = "ns"
	else if (b=="Microsoft Internet Explorer") this.b = "ie"
	else this.b = b
	this.version = navigator.appVersion
	this.v = parseInt(this.version)
	this.ns = (this.b=="ns" && this.v>=4)
	this.ns4 = (this.b=="ns" && this.v==4)
	this.ns5 = (this.b=="ns" && this.v==5)
	this.ie = (this.b=="ie" && this.v>=4)
	this.ie4 = (this.version.indexOf('MSIE 4')>0)
	this.ie5 = (this.version.indexOf('MSIE 5')>0)
	this.min = (this.ns||this.ie)
	this.CRAPBrowser = (this.ie4 && this.mac); //Cannot Resolve Addresses Properly
}

is = new BrowserCheck();

var LocFolder = GetFolder(window.location.href);
function GetFolder(LocPath){
	LocPath = ReplaceStuff('\'','%27',LocPath);
	var i = LocPath.lastIndexOf('/');
	if (i<0){i=LocPath.lastIndexOf('\\')};
	return LocPath.substring(0,i);
}

function CombineURLs(InURL){
	var i = InURL.indexOf('../');
	var s = LocFolder;
	while (i >- 1){
		s = GetFolder(s);
		InURL = InURL.substring(3,InURL.length);
		i = InURL.indexOf('../');
	}
	return s + '/' + InURL;
}

x = new Array();
function ResolveURLs(InText,Attribute){
	x.length=0;
	var Temp = InText.toLowerCase();
	var z;
	var AttLen = Attribute.length + 2;
	var y=Temp.lastIndexOf(Attribute + '="');
	while (y>-1){
		var sLoc = y+AttLen;
		if (Temp.substring(sLoc,sLoc+5) != 'http:'){
			x[x.length]=new Array();
			x[x.length-1][0] = sLoc;
			z = Temp.indexOf('"',sLoc);
			x[x.length-1][1] = z;
			x[x.length-1][2] = InText.substring(sLoc,z);

		}
		Temp = Temp.substring(0,y);
		y=Temp.lastIndexOf(Attribute + '="');
	}
	for (var j=0; j<x.length; j++){
		InText = InText.substring(0,x[j][0]) + CombineURLs(x[j][2]) + InText.substring(x[j][1], InText.length);
	}
	return InText;
}

function ResolveAllURLs(Stuff){
	Stuff = ResolveURLs(Stuff,'href');
	Stuff = ResolveURLs(Stuff,'src');
	Stuff = ResolveURLs(Stuff,'parent.location');
	return Stuff;
}

var Feedback = '';
var Correct = 'Correct! Well done.';
var Incorrect = 'Some of your answers are incorrect. Incorrect answers have been left in place for you to change.'; 
var GiveHint = 'The next correct letter has been added to the answer.';
var CaseSensitive = false;
var YourScoreIs = 'Your score is ';
var Instructions = '';
var BuiltCloze = '';
var ExerciseSubtitle = 'Gap-fill exercise';
var ExerciseTitle = 'Late Elementary Review I';
var FirstShow = true;
var ReadingURL = '';

var PreviousPage = history.length;







var NavBar='';


NavBar+='<tr><form name="NavButtons1" action=""><td bgcolor="#000066" align="center">';
NavBar+='<font face="Geneva,Arial" size="-1">';

NavBar+='<input type="button" value="http://academics.vmi.edu/modlan_kbb/kbb/vmispanishdrills.htm" onclick="parent.GoBack()"></input>';



NavBar+='</font></td></form></tr>';
if (is.CRAPBrowser){NavBar=ResolveAllURLs(NavBar);}


var TitleCode = '<tr><td align="center" valign="middle" bgcolor="#ffffff">';
TitleCode += '<font size="+1" face="Geneva,Arial" color="#000033">' + ExerciseTitle + '</font><br />';
TitleCode += '<font size="-1" face="Geneva,Arial" color="#000033">' + ExerciseSubtitle + '<br />';

TitleCode += '</font></td></tr>';

var WordBox = '';

var ClozeOpener = '<table border="0" width="85%" cellpadding="10">';
ClozeOpener += '<tr><td valign="top" bgcolor="#f0ebaa">';
ClozeOpener += '<form name="Cloze" onsubmit="return false"><font face="Geneva,Arial" color="#000000">';

var ClozeCloser = '</font></form></td></tr>';

var Buttons = '<tr><td align="center" valign="top" bgcolor="#f0ebaa">';
Buttons += '<form name="Buttons"><font face="Geneva,Arial" color="#000000">';
Buttons += '<input type="button" value="Check" onclick="parent.CheckAnswers()"></input>';


Buttons += '<input type="button" value="Hint" onclick="parent.ShowHint()"></input>';


Buttons += '</font></form></td></tr></table>';

var GapCode = '<input type="text" name="[strGapName]" size="[strGapSize]" onFocus="parent.TrackFocus([strItemNum])" value="[strValue]"></input>';
var ClueButton = '';

ClueButton = '<input type="button" value="[?]" onclick="parent.ShowClue([strItemNum])"></input>';


function GoBack(){
	var BackSkip = history.length - PreviousPage;
	if (BackSkip > 0){
		history.go((BackSkip+1)*-1);
	}
	else{
		parent.history.back();
	}
}




function BuildExercise(){
	var OutString = '';
	var ClozeStuff = '';

	for (var i=0; i<I.length; i++){

//Add the text
		ClozeStuff += Text[i];

//Create and add the gap
//If it's already right, then add it in bold:
		if (State[i][4] == 1){
			ClozeStuff += '<b>' + State[i][5] + '</b>';
		}
		
		else{
			GapLen = I[i][1][0][0].length;
			if (GapLen < 3){GapLen = 3;}
			Gap = ReplaceStuff('[strGapSize]', GapLen, GapCode);
			Gap = ReplaceStuff('[strGapName]', 'Gap' + i + '', Gap);
			Gap = ReplaceStuff('[strItemNum]', i + '', Gap);
			Gap = ReplaceStuff('[strValue]', State[i][5], Gap);
			ClozeStuff += Gap;	

//Create and add the clue button
			if (I[i][2].length > 0){
				Btn = ReplaceStuff('[strItemNum]', i + '', ClueButton);
				ClozeStuff += Btn;
			}
		}
	}

//Add the last bit
	if (Text.length > I.length){
		ClozeStuff += Text[Text.length-1];
	}

//Put the final pieces together
	OutString = ClozeOpener + ClozeStuff + ClozeCloser + Buttons;
	BuiltCloze = OutString;
}

function WriteFeedback(Feedback) {
//Build the output string
	var OutString = '';
	OutString += '<html>';
	OutString += '<body  background="" bgcolor="#ffffff" text="#000000" link="#0000ff" vlink="#0000cc">';
	OutString += '<center><table border="0" cellpadding="5" cellspacing="1" width="85%">';
	OutString += NavBar;
	if (Feedback.length>0){
		OutString += '<tr><td bgcolor="#f0ebaa" align="center">'; 
		OutString += '<font face="Geneva,Arial" size="-1" color="#000000">';
		OutString += Feedback;
		OutString += '</font></td></tr>'
	}
	OutString += '</table></center></body></html>';

	if (is.CRAPBrowser){OutString=ResolveAllURLs(OutString);}

//Write it to the frame
	TopFrame.document.clear();
	TopFrame.document.open();
	TopFrame.document.write(OutString);
	TopFrame.document.close();
}

function DisplayExercise(){
//Build the output string
	var OutString = '';
	OutString += '<html>';
	OutString += '<body  background="" bgcolor="#ffffff" text="#000000" link="#0000ff" vlink="#0000cc">';
	OutString += '<center><table border="0" cellpadding="5" cellspacing="1" width="85%">';
	OutString += TitleCode; 
	OutString += '<tr><td bgcolor="#f0ebaa" align="center">'; 
	if (WordBox.length > 0){
		OutString += WordBox;
	}
	OutString += '<font face="Geneva,Arial" size="-1">';
	OutString += BuiltCloze;
	OutString += '</font></td></tr>';
	OutString += NavBar;
	OutString += '</table></center></body></html>';

	if (is.CRAPBrowser){OutString=ResolveAllURLs(OutString);}

//Write it to the frame
	BottomFrame.document.clear();
	BottomFrame.document.open();
	BottomFrame.document.write(OutString);
	BottomFrame.document.close();
}

function ShowClue(ItemNum){
//alert(ItemNum);
	State[ItemNum][0] = 1;
	WriteFeedback(I[ItemNum][2]);
}

function SaveCurrentAnswers(){
	for (var i=0; i<I.length; i++){
		State[i][5] = GetGapValue(i);
	}
}

function RestoreCurrentAnswers(){
	for (var i=0; i<I.length; i++){
		SetGapValue(i, State[i][5]);
	}
}

var CurrentWord = 0;

function ReplaceStuff(Token, Replacement, InString){
	var i = InString.indexOf(Token);
	var FirstBit = '';
	var LastBit = '';
	while (i>-1){
		FirstBit = InString.substring(0, i);
		LastBit = InString.substring(i + Token.length, InString.length);	
		InString = FirstBit + Replacement + LastBit;
		i = InString.indexOf(Token);
	}
	return InString;
}

I = new Array();

I[0] = new Array();
I[0][1] = new Array();
I[0][1][0] = new Array();
I[0][1][0][0]='Eran las nueve';
I[0][2]='';

I[1] = new Array();
I[1][1] = new Array();
I[1][1][0] = new Array();
I[1][1][0][0]='fuimos';
I[1][2]='';

I[2] = new Array();
I[2][1] = new Array();
I[2][1][0] = new Array();
I[2][1][0][0]='son';
I[2][2]='';

I[3] = new Array();
I[3][1] = new Array();
I[3][1][0] = new Array();
I[3][1][0][0]='te pones';
I[3][2]='';

I[4] = new Array();
I[4][1] = new Array();
I[4][1][0] = new Array();
I[4][1][0][0]='se llamaba';
I[4][1][1] = new Array();
I[4][1][1][0]='era';
I[4][2]='use llamarse: Reflexive!';

I[5] = new Array();
I[5][1] = new Array();
I[5][1][0] = new Array();
I[5][1][0][0]='lleguemos';
I[5][2]='You aren\'t there yet--Subjunctive!';

I[6] = new Array();
I[6][1] = new Array();
I[6][1][0] = new Array();
I[6][1][0][0]='trabajaba';
I[6][2]='Used to--imperfect';

I[7] = new Array();
I[7][1] = new Array();
I[7][1][0] = new Array();
I[7][1][0][0]='paguen';
I[7][2]='doubt causes subjunctive';

I[8] = new Array();
I[8][1] = new Array();
I[8][1][0] = new Array();
I[8][1][0][0]='estuvo';
I[8][2]='specific period of time: preterit';

I[9] = new Array();
I[9][1] = new Array();
I[9][1][0] = new Array();
I[9][1][0][0]='sea';
I[9][2]='doubt causes subjunctive';

I[10] = new Array();
I[10][1] = new Array();
I[10][1][0] = new Array();
I[10][1][0][0]='te ba\u00F1es';
I[10][1][1] = new Array();
I[10][1][1][0]='te banes';
I[10][2]='wishing causes subjunctive';

I[11] = new Array();
I[11][1] = new Array();
I[11][1][0] = new Array();
I[11][1][0][0]='tiene';
I[11][2]='';

I[12] = new Array();
I[12][1] = new Array();
I[12][1][0] = new Array();
I[12][1][0][0]='esperamos';
I[12][1][1] = new Array();
I[12][1][1][0]='deseamos';
I[12][1][2] = new Array();
I[12][1][2][0]='queremos';
I[12][2]='';

I[13] = new Array();
I[13][1] = new Array();
I[13][1][0] = new Array();
I[13][1][0][0]='se duerme';
I[13][2]='reflexive!';

I[14] = new Array();
I[14][1] = new Array();
I[14][1][0] = new Array();
I[14][1][0][0]='estudio';
I[14][2]='still going on, so use present tense';

I[15] = new Array();
I[15][1] = new Array();
I[15][1][0] = new Array();
I[15][1][0][0]='hagamos';
I[15][2]='wishing causes subjunctive';

I[16] = new Array();
I[16][1] = new Array();
I[16][1][0] = new Array();
I[16][1][0][0]='se levant\u00F3';
I[16][1][1] = new Array();
I[16][1][1][0]='se levanto';
I[16][2]='she only did it once: preterit';

I[17] = new Array();
I[17][1] = new Array();
I[17][1][0] = new Array();
I[17][1][0][0]='se visten';
I[17][2]='e-i stem change';

I[18] = new Array();
I[18][1] = new Array();
I[18][1][0] = new Array();
I[18][1][0][0]='se cepill\u00F3';
I[18][1][1] = new Array();
I[18][1][1][0]='se cepillo';
I[18][2]='she only did it once';

I[19] = new Array();
I[19][1] = new Array();
I[19][1][0] = new Array();
I[19][1][0][0]='haga';
I[19][2]='weather: use hacer';

I[20] = new Array();
I[20][1] = new Array();
I[20][1][0] = new Array();
I[20][1][0][0]='se llama';
I[20][1][1] = new Array();
I[20][1][1][0]='es';
I[20][2]='';

I[21] = new Array();
I[21][1] = new Array();
I[21][1][0] = new Array();
I[21][1][0][0]='insisten';
I[21][2]='';

I[22] = new Array();
I[22][1] = new Array();
I[22][1][0] = new Array();
I[22][1][0][0]='me case';
I[22][2]='wishing causes subjunctive';

I[23] = new Array();
I[23][1] = new Array();
I[23][1][0] = new Array();
I[23][1][0][0]='se ba\u00F1e';
I[23][1][1] = new Array();
I[23][1][1][0]='se bane';
I[23][2]='the person does not exist--subjunctive';

I[24] = new Array();
I[24][1] = new Array();
I[24][1][0] = new Array();
I[24][1][0][0]='est\u00E9';
I[24][1][1] = new Array();
I[24][1][1][0]='este';
I[24][2]='it does not exist--subjunctive';

I[25] = new Array();
I[25][1] = new Array();
I[25][1][0] = new Array();
I[25][1][0][0]='tuvimos';
I[25][2]='irregular preterit';

I[26] = new Array();
I[26][1] = new Array();
I[26][1][0] = new Array();
I[26][1][0][0]='dudamos';
I[26][1][1] = new Array();
I[26][1][1][0]='no creemos';
I[26][2]='';

I[27] = new Array();
I[27][1] = new Array();
I[27][1][0] = new Array();
I[27][1][0][0]='tengamos';
I[27][2]='provision causes subjunctive';

I[28] = new Array();
I[28][1] = new Array();
I[28][1][0] = new Array();
I[28][1][0][0]='est\u00E1';
I[28][1][1] = new Array();
I[28][1][1][0]='esta';
I[28][2]='location: estar';

I[29] = new Array();
I[29][1] = new Array();
I[29][1][0] = new Array();
I[29][1][0][0]='est\u00E9s';
I[29][1][1] = new Array();
I[29][1][1][0]='estes';
I[29][2]='';

I[30] = new Array();
I[30][1] = new Array();
I[30][1][0] = new Array();
I[30][1][0][0]='d\u00E9';
I[30][1][1] = new Array();
I[30][1][1][0]='de';
I[30][2]='fear causes subjunctive';

I[31] = new Array();
I[31][1] = new Array();
I[31][1][0] = new Array();
I[31][1][0][0]='\u00EDbamos';
I[31][1][1] = new Array();
I[31][1][1][0]='ibamos';
I[31][2]='habitual action in the past: use imperfect';

I[32] = new Array();
I[32][1] = new Array();
I[32][1][0] = new Array();
I[32][1][0][0]='tiene';
I[32][2]='';

I[33] = new Array();
I[33][1] = new Array();
I[33][1][0] = new Array();
I[33][1][0][0]='me siento';
I[33][2]='pronouns go in front';


Text = new Array();
Text[0]='';
Text[1]=' cuando ellos llegaron a casa. (it was 9:00)<br /><br />Ayer a las tres nosotros ';
Text[2]=' al cine. (went)<br /><br />Creo que los coches alemanes ';
Text[3]=' superiores a los coches japoneses. (are) <br /><br />Cuando tienes fr\u00EDo, t\u00FA ';
Text[4]=' un su\u00E9ter. (put on)<br /><br />Cuando yo era joven, mi mejor amigo ';
Text[5]=' Tony. (was named)<br /><br />Despu\u00E9s de que ';
Text[6]=' a Madrid, vamos a buscar un hotel. (we arrive)<br /><br />En la escuela secundaria yo ';
Text[7]=' en Pizza Hut. (worked) <br /><br />Dudo que ellos ';
Text[8]=' sus impuestos. (pay)<br /><br />Elena ';
Text[9]=' en el hospital por una semana. (was) <br /><br />Es dudoso que yo ';
Text[10]=' presidente. (will be)<br /><br />Es necesario que t\u00FA ';
Text[11]='. (take a bath)<br /><br />Es verdad que mayo ';
Text[12]=' 31 d\u00EDas. (has) <br /><br />Nosotros ';
Text[13]=' que la ambulancia llegue pronto. (we hope)<br /><br />Felipe es mal estudiante. El ';
Text[14]=' durante la clase. (falls asleep)<br /><br />Hace tres semestres que yo ';
Text[15]=' el espa\u00F1ol. (have been studying)<br /><br />La profesora quiere que nosotros ';
Text[16]=' la tarea. (do)<br /><br />Linda ';
Text[17]=' para la canci\u00F3n nacional. (stood up) <br /><br />Los ni\u00F1os ';
Text[18]=' antes de desayunar. (get dressed)<br /><br />Mar\u00EDa ';
Text[19]=' los dientes despu\u00E9s de comer. (brushed)<br /><br />Me alegro de que ';
Text[20]=' sol. (it is sunny) <br /><br />Mi madre ';
Text[21]=' Rita. (is named)<br /><br />Mis padres ';
Text[22]=' en que yo haga la cama. (insist)<br /><br />Mis padres no quieren que yo ';
Text[23]=' pronto. (get maried) <br /><br />No conozco a nadie que no ';
Text[24]=' (does not bathe) <br /><br />No hay ning\u00FAn banco que ';
Text[25]=' abierto los domingos. (is) <br /><br />No pudimos ir a la fiesta porque nosotros ';
Text[26]=' que estudiar. (had) <br /><br />Nosotros ';
Text[27]=' que la profesora cancele el examen. (doubt)<br /><br />Podemos ir al club con tal de que ';
Text[28]=' 21 a\u00F1os. (we are 21)<br /><br />S\u00E9 que Enrique ';
Text[29]=' en Madrid. (is) <br /><br />Siento que t\u00FA ';
Text[30]=' enfermo. (are) <br /><br />Tengo miedo de que el m\u00E9dico me ';
Text[31]=' una inyecci\u00F3n. (will give) <br /><br />Todos los veranos nosotros ';
Text[32]=' a la casa de mi abuela. (went)<br /><br />Vivimos en una casa que ';
Text[33]=' garaje. (has)<br /><br />Yo ';
Text[34]=' durante la clase. (sit down)<br />';


State = new Array();

function StartUp(){

	var i = 0;



	State.length = 0;
	for (i=0; i<I.length; i++){
		State[i] = new Array();
		State[i][0] = 0; // clue asked for or not
		State[i][1] = 0; // hints asked for, or penalties for checking a wrong answer
		State[i][2] = 0; // length of answer matched
		State[i][3] = 0; // score for this item
		State[i][4] = 0; // already answered correctly 
		State[i][5] = ''; // answer entered in text box (right or not)
	}
	BuildExercise();
	WriteFeedback(Instructions);
	DisplayExercise();





}

function TrimString(InString){
        var x = 0

        if (InString.length != 0) {
                while ((InString.charAt(InString.length - 1) == '\u0020') || (InString.charAt(InString.length - 1) == '\u000A') || (InString.charAt(InString.length - 1) == '\u000D')){
                        InString = InString.substring(0, InString.length - 1)
                }

                while ((InString.charAt(0) == '\u0020') || (InString.charAt(0) == '\u000A') || (InString.charAt(0) == '\u000D')){
                        InString = InString.substring(1, InString.length)
                }

                while (InString.indexOf('  ') != -1) {
                        x = InString.indexOf('  ')
                        InString = InString.substring(0, x) + InString.substring(x+1, InString.length)
                 }

                return InString;
        }

        else {
                return '';
        }

}

function CheckAnswers(){

	SaveCurrentAnswers();
	var AllCorrect = 1;

//Check each answer
	for (var i = 0; i< I.length; i++){

		if (State[i][4] != 1){
//If it's right, calculate its score
			if (CheckAnswer(i, true) > -1){
				var TotalChars = GetGapValue(i).length;
				State[i][3] = (TotalChars-State[i][1])/TotalChars;
				if (State[i][0] > 0){State[i][3] = State[i][3]/2;}
				if (State[i][3]<0){State[i][3] = 0;}
				State[i][4] = 1;
			}
			else{
//Otherwise, add zero to the array and increment the hints for this item, as a penalty
				State[i][1]++;
				State[i][3] = 0;

//then set the flag
				AllCorrect = 0;
			}
		}
	}

//Calculate the total score
	var TotalScore = 0;
	for (i=0; i<State.length; i++){
		TotalScore += State[i][3];
	}
	TotalScore = Math.floor((TotalScore * 100)/I.length);

//Compile the output
	Output = '';

	if (AllCorrect == 1){
		Output = Correct + '<br />';
	}

	Output += YourScoreIs + ' ' + TotalScore + '%.<br />';
	if (AllCorrect == 0){
		Output += '<br />' + Incorrect;
	}
	BuildExercise();
	WriteFeedback(Output);



	DisplayExercise();
	RestoreCurrentAnswers();
}


function TrackFocus(BoxNumber){
	CurrentWord = BoxNumber;
}

function CheckBeginning(Guess, Answer){
	var OutString = '';
	var i = 0;
	var UpperGuess = '';
	var UpperAnswer = '';

	if (CaseSensitive == false) {
		UpperGuess = Guess.toUpperCase();
		UpperAnswer = Answer.toUpperCase();
	}
	else {
		UpperGuess = Guess;
		UpperAnswer = Answer;
	}

	while (UpperGuess.charAt(i) == UpperAnswer.charAt(i)) {
		OutString += Guess.charAt(i);
		i++;
	}
	OutString += Answer.charAt(i);
	return OutString;
}

function FindLongest(InArray){
	if (InArray.length < 1){return -1;}

	var Longest = 0;
	for (var i=1; i<InArray.length; i++){
		if (InArray[i].length > InArray[Longest].length){
			Longest = i;
		}
	}
	return Longest;
}

function GetGapValue(GNum){
	var RetVal = '';
	if ((GNum<0)||(GNum>=I.length)){return RetVal;}
	if (eval('BottomFrame.document.Cloze.Gap' + GNum) != null){
		RetVal = eval('BottomFrame.document.Cloze.Gap' + GNum).value;
		RetVal = TrimString(RetVal);
	}
	else{
		RetVal = State[GNum][5];
	}
	return RetVal;
}

function SetGapValue(GNum, Val){
	if ((GNum<0)||(GNum>=I.length)){return;}
	if (eval('BottomFrame.document.Cloze.Gap' + GNum) != null){
		eval('BottomFrame.document.Cloze.Gap' + GNum).value = Val;
	}
}

function FindCurrent() {
	var x = 0;
	FoundCurrent = -1;

//Test the current word:
//If it's state is not set to already correct, check the word.
	if (State[CurrentWord][4] != 1){
		if (CheckAnswer(CurrentWord, false) < 0){
			return CurrentWord;
		}
	}
	
	x=CurrentWord + 1;
	while (x<I.length){
		if (State[x][4] != 1){
			if (CheckAnswer(x, false) < 0){
				return x;
			}
		}
	x++;	
	}

	x = 0;
	while (x<CurrentWord){
		if (State[x][4] != 1){
			if (CheckAnswer(x, false) < 0){
				return x;
			}
		}
	x++;	
	}
	return FoundCurrent;
}

function CheckAnswer(GapNum, MarkAnswer){
	var Guess = GetGapValue(GapNum);
	var UpperGuess = '';
	var UpperAnswer = '';
	if (CaseSensitive == false){
		UpperGuess = Guess.toUpperCase();
	}
	else{
		UpperGuess = Guess;
	}
	var Match = -1;
	for (var i = 0; i<I[GapNum][1].length; i++){
		if (CaseSensitive == false){
			UpperAnswer = I[GapNum][1][i][0].toUpperCase();
		}
		else{
			UpperAnswer = I[GapNum][1][i][0];
		}
		if (TrimString(UpperGuess) == UpperAnswer){
			Match = i;
			if (MarkAnswer == true){
				State[GapNum][4] = 1;
			}
			State[GapNum][5] = Guess;
		}
	}
	return Match;
}

function GetHint(GapNum){
	Guess = GetGapValue(GapNum);

	if (CheckAnswer(GapNum, false) > -1){return ''}
	RightBits = new Array();
	for (var i=0; i<I[GapNum][1].length; i++){
		RightBits[i] = CheckBeginning(Guess, I[GapNum][1][i][0]);
	}
	var RightOne = FindLongest(RightBits);
	var Result = I[GapNum][1][RightOne][0].substring(0,RightBits[RightOne].length);
//Add another char if the last one is a space
	if (Result.charAt(Result.length-1) == ' '){
		Result = I[GapNum][1][RightOne][0].substring(0,RightBits[RightOne].length+1);
	}
	return Result;
}

function ShowHint(){
	var CurrGap = FindCurrent();
	if (CurrGap < 0){return;}

	var HintString = GetHint(CurrGap);

	if (HintString.length > 0){
		SetGapValue(CurrGap, HintString);
		State[CurrGap][1] = State[CurrGap][1] + 1;
	}
	WriteFeedback(GiveHint);
}




function Blank(){
	return '<html><body>&copy;Half-Baked Software. Loading...</body></html>';
}

//-->

//]]>

</script> 
 </head> 
 <!--<body>Fool those dumb ad-inserting ISPs</body>--> 
 <!--For full XHTML 1.0 compatibility, remove the border and framespacing attributes.
These are required for proper display in current browsers, but render the document incompatible. Then, you'll need to add the appropriate Document Type Declaration; use
the W3C XHTML 1 frameset DTD.--> 
 <frameset rows="120,*" framespacing="0" border="0" onload="StartUp()"> 
  <frame src="javascript:parent.Blank()" frameborder="0" name="TopFrame"> 
  <frame src="javascript:parent.Blank()" frameborder="0" name="BottomFrame"> 
 </frameset>  
</html>